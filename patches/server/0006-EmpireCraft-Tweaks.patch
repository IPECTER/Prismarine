From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 14 May 2022 17:29:53 +0900
Subject: [PATCH] EmpireCraft Tweaks

Original by EmpireCraft

Copyright (C) EmpireCraft

[REFERENCE PATCHES]
0003 - Legacy Data Converter
0018 - Improved BungeeCord support
0031 - Mark Withers as Persistent
0038 - Remove "Copy of" from Written Books
0039 - Disable Repair Cost
0053 - Allow damage to shields for all damage
0054 - Don't use force unload for keep spawn setting change
0055 - Don't trigger Lootable Refresh for non player interaction
0056 - Do not return item to player on cancel drop item event
0062 - Don't use snapshots for TileEntity::getOwner
0066 - Allow negative Amplifier values
0071 - Default don't use blockstate snapshots
0080 - Use lenient json to component to resolve old WE schematic issue
0083 - dont load chunks for physics
0085 - Do not require nether fortress structure for mob spawning
0086 - bound villager trade maxUses by 16
0088 - Limit worlds structures can generate
0099 - Do not process chat/commands before player has joined

[ADDED PATCHES]
0007 - Hidden Item Meta
0013 - Allow force spawns

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
Software), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

diff --git a/src/main/java/com/empireminecraft/DataConverters.java b/src/main/java/com/empireminecraft/DataConverters.java
new file mode 100644
index 0000000000000000000000000000000000000000..6cd4871a1930a0413b5625c49758e2e3fe63a7da
--- /dev/null
+++ b/src/main/java/com/empireminecraft/DataConverters.java
@@ -0,0 +1,2639 @@
+package com.empireminecraft;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.Executor;
+
+import com.google.common.collect.Sets;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.mojang.datafixers.DSL.TypeReference;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.DataFixerBuilder;
+import com.mojang.serialization.Dynamic;
+import com.mojang.datafixers.schemas.Schema;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.util.StringUtil;
+import net.minecraft.util.datafix.DataFixTypes;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.item.DyeColor;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
+
+/**
+ * Handles converting all Pre 1.13.2 data using the Legacy DataFix System (ported to 1.13.2)
+ *
+ * We register a DFU Fixer per Legacy Data Version and apply the fixes using legacy strategy
+ * which is safer, faster and cleaner code.
+ *
+ * The pre DFU code did not fail when the Source version was unknown.
+ *
+ * This class also provides util methods for converting compounds to wrap the update call to
+ * receive the source version in the compound
+ *
+ */
+public class DataConverters extends DataFixerBuilder {
+
+    private static final NbtOps OPS_NBT = NbtOps.INSTANCE;
+    public static final int LEGACY_VERSION = 1343;
+    public static int DATA_VERSION;
+    public static DataConverters INSTANCE;
+
+    private final Map<LegacyType, List<DataConverter>> converters = new EnumMap<>(LegacyType.class);
+    private final Map<LegacyType, List<DataInspector>> inspectors = new EnumMap<>(LegacyType.class);
+
+    // Set on build
+    private DataFixer fixer;
+    private static final Map<String, LegacyType> DFU_TO_LEGACY = new HashMap<>();
+
+    public enum LegacyType {
+        LEVEL(DataFixTypes.LEVEL.getType()),
+        PLAYER(DataFixTypes.PLAYER.getType()),
+        CHUNK(DataFixTypes.CHUNK.getType()),
+        BLOCK_ENTITY(() -> "block_entity"),
+        ENTITY(References.ENTITY),
+        ITEM_INSTANCE(References.ITEM_STACK),
+        OPTIONS(DataFixTypes.OPTIONS.getType()),
+        STRUCTURE(DataFixTypes.STRUCTURE.getType());
+
+        private final TypeReference type;
+
+        LegacyType(TypeReference type) {
+            this.type = type;
+            DFU_TO_LEGACY.put(type.typeName(), this);
+        }
+
+        public TypeReference getDFUType() {
+            return type;
+        }
+    }
+
+    public DataConverters(int dataVersion) {
+        super(dataVersion);
+        DATA_VERSION = dataVersion;
+        INSTANCE = this;
+        registerConverters();
+        registerInspectors();
+    }
+
+
+    // Called after fixers are built and ready for FIXING
+    public DataFixer build(final Executor executor) {
+        return this.fixer = new WrappedDataFixer(super.build(executor));
+    }
+
+    private class WrappedDataFixer implements DataFixer {
+        private final DataFixer realFixer;
+
+        WrappedDataFixer(DataFixer realFixer) {
+            this.realFixer = realFixer;
+        }
+
+        @Override
+        public <T> Dynamic<T> update(TypeReference type, Dynamic<T> dynamic, int sourceVer, int targetVer) {
+            LegacyType legacyType = DFU_TO_LEGACY.get(type.typeName());
+            if (sourceVer < LEGACY_VERSION && legacyType != null) {
+                CompoundTag cmp = (CompoundTag) dynamic.getValue();
+                int desiredVersion = Math.min(targetVer, LEGACY_VERSION);
+
+                cmp = convert(legacyType, cmp, sourceVer, desiredVersion);
+                sourceVer = desiredVersion;
+                dynamic = new Dynamic(OPS_NBT, cmp);
+            }
+            return realFixer.update(type, dynamic, sourceVer, targetVer);
+        }
+
+        private CompoundTag convert(LegacyType type, CompoundTag cmp, int sourceVer, int desiredVersion) {
+            List<DataConverter> converters = DataConverters.this.converters.get(type);
+            if (converters != null && !converters.isEmpty()) {
+                for (DataConverter converter : converters) {
+                    int dataVersion = converter.getDataVersion();
+                    if (dataVersion > sourceVer && dataVersion <= desiredVersion) {
+                        cmp = converter.convert(cmp);
+                    }
+                }
+            }
+
+            List<DataInspector> inspectors = DataConverters.this.inspectors.get(type);
+            if (inspectors != null && !inspectors.isEmpty()) {
+                for (DataInspector inspector : inspectors) {
+                    cmp = inspector.inspect(cmp, sourceVer, desiredVersion);
+                }
+            }
+
+            return cmp;
+        }
+
+        @Override
+        public Schema getSchema(int i) {
+            return realFixer.getSchema(i);
+        }
+    }
+
+    public static CompoundTag convert(LegacyType type, CompoundTag cmp) {
+        return convert(type.getDFUType(), cmp);
+    }
+
+    public static CompoundTag convert(LegacyType type, CompoundTag cmp, int sourceVer) {
+        return convert(type.getDFUType(), cmp, sourceVer);
+    }
+    public static CompoundTag convert(LegacyType type, CompoundTag cmp, int sourceVer, int targetVer) {
+        return convert(type.getDFUType(), cmp, sourceVer, targetVer);
+    }
+
+    public static CompoundTag convert(TypeReference type, CompoundTag cmp) {
+        int i = cmp.contains("DataVersion", 99) ? cmp.getInt("DataVersion") : -1;
+        return convert(type, cmp, i);
+    }
+
+    public static CompoundTag convert(TypeReference type, CompoundTag cmp, int sourceVer) {
+        return convert(type, cmp, sourceVer, DATA_VERSION);
+    }
+
+    public static CompoundTag convert(TypeReference type, CompoundTag cmp, int sourceVer, int targetVer) {
+        if (sourceVer >= targetVer) {
+            return cmp;
+        }
+        return (CompoundTag) INSTANCE.fixer.update(type, new Dynamic<>(OPS_NBT, cmp), sourceVer, targetVer).getValue();
+    }
+
+
+    public interface DataInspector {
+        CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer);
+    }
+
+    public interface DataConverter {
+
+        int getDataVersion();
+
+        CompoundTag convert(CompoundTag cmp);
+    }
+
+
+    private void registerInspector(LegacyType type, DataInspector inspector) {
+        this.inspectors.computeIfAbsent(type, k -> new ArrayList<>()).add(inspector);
+    }
+
+    private void registerConverter(LegacyType type, DataConverter converter) {
+        int version = converter.getDataVersion();
+
+        List<DataConverter> list = this.converters.computeIfAbsent(type, k -> new ArrayList<>());
+        if (!list.isEmpty() && list.get(list.size() - 1).getDataVersion() > version) {
+            for (int j = 0; j < list.size(); ++j) {
+                if (list.get(j).getDataVersion() > version) {
+                    list.add(j, converter);
+                    break;
+                }
+            }
+        } else {
+            list.add(converter);
+        }
+    }
+
+    private void registerInspectors() {
+        registerEntityItemList("EntityHorseDonkey", "SaddleItem", "Items");
+        registerEntityItemList("EntityHorseMule", "Items");
+        registerEntityItemList("EntityMinecartChest", "Items");
+        registerEntityItemList("EntityMinecartHopper", "Items");
+        registerEntityItemList("EntityVillager", "Inventory");
+        registerEntityItemListEquipment("EntityArmorStand");
+        registerEntityItemListEquipment("EntityBat");
+        registerEntityItemListEquipment("EntityBlaze");
+        registerEntityItemListEquipment("EntityCaveSpider");
+        registerEntityItemListEquipment("EntityChicken");
+        registerEntityItemListEquipment("EntityCow");
+        registerEntityItemListEquipment("EntityCreeper");
+        registerEntityItemListEquipment("EntityEnderDragon");
+        registerEntityItemListEquipment("EntityEnderman");
+        registerEntityItemListEquipment("EntityEndermite");
+        registerEntityItemListEquipment("EntityEvoker");
+        registerEntityItemListEquipment("EntityGhast");
+        registerEntityItemListEquipment("EntityGiantZombie");
+        registerEntityItemListEquipment("EntityGuardian");
+        registerEntityItemListEquipment("EntityGuardianElder");
+        registerEntityItemListEquipment("EntityHorse");
+        registerEntityItemListEquipment("EntityHorseDonkey");
+        registerEntityItemListEquipment("EntityHorseMule");
+        registerEntityItemListEquipment("EntityHorseSkeleton");
+        registerEntityItemListEquipment("EntityHorseZombie");
+        registerEntityItemListEquipment("EntityIronGolem");
+        registerEntityItemListEquipment("EntityMagmaCube");
+        registerEntityItemListEquipment("EntityMushroomCow");
+        registerEntityItemListEquipment("EntityOcelot");
+        registerEntityItemListEquipment("EntityPig");
+        registerEntityItemListEquipment("EntityPigZombie");
+        registerEntityItemListEquipment("EntityRabbit");
+        registerEntityItemListEquipment("EntitySheep");
+        registerEntityItemListEquipment("EntityShulker");
+        registerEntityItemListEquipment("EntitySilverfish");
+        registerEntityItemListEquipment("EntitySkeleton");
+        registerEntityItemListEquipment("EntitySkeletonStray");
+        registerEntityItemListEquipment("EntitySkeletonWither");
+        registerEntityItemListEquipment("EntitySlime");
+        registerEntityItemListEquipment("EntitySnowman");
+        registerEntityItemListEquipment("EntitySpider");
+        registerEntityItemListEquipment("EntitySquid");
+        registerEntityItemListEquipment("EntityVex");
+        registerEntityItemListEquipment("EntityVillager");
+        registerEntityItemListEquipment("EntityVindicator");
+        registerEntityItemListEquipment("EntityWitch");
+        registerEntityItemListEquipment("EntityWither");
+        registerEntityItemListEquipment("EntityWolf");
+        registerEntityItemListEquipment("EntityZombie");
+        registerEntityItemListEquipment("EntityZombieHusk");
+        registerEntityItemListEquipment("EntityZombieVillager");
+        registerEntityItemSingle("EntityFireworks", "FireworksItem");
+        registerEntityItemSingle("EntityHorse", "ArmorItem");
+        registerEntityItemSingle("EntityHorse", "SaddleItem");
+        registerEntityItemSingle("EntityHorseMule", "SaddleItem");
+        registerEntityItemSingle("EntityHorseSkeleton", "SaddleItem");
+        registerEntityItemSingle("EntityHorseZombie", "SaddleItem");
+        registerEntityItemSingle("EntityItem", "Item");
+        registerEntityItemSingle("EntityItemFrame", "Item");
+        registerEntityItemSingle("EntityPotion", "Potion");
+
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItem("TileEntityRecordPlayer", "RecordItem"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityBrewingStand", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityChest", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityDispenser", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityDropper", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityFurnace", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityHopper", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorItemList("TileEntityShulkerBox", "Items"));
+        registerInspector(LegacyType.BLOCK_ENTITY, new DataInspectorMobSpawnerMobs());
+        registerInspector(LegacyType.CHUNK, new DataInspectorChunks());
+        registerInspector(LegacyType.ENTITY, new DataInspectorCommandBlock());
+        registerInspector(LegacyType.ENTITY, new DataInspectorEntityPassengers());
+        registerInspector(LegacyType.ENTITY, new DataInspectorMobSpawnerMinecart());
+        registerInspector(LegacyType.ENTITY, new DataInspectorVillagers());
+        registerInspector(LegacyType.ITEM_INSTANCE, new DataInspectorBlockEntity());
+        registerInspector(LegacyType.ITEM_INSTANCE, new DataInspectorEntity());
+        registerInspector(LegacyType.LEVEL, new DataInspectorLevelPlayer());
+        registerInspector(LegacyType.PLAYER, new DataInspectorPlayer());
+        registerInspector(LegacyType.PLAYER, new DataInspectorPlayerVehicle());
+        registerInspector(LegacyType.STRUCTURE, new DataInspectorStructure());
+    }
+
+    private void registerConverters() {
+        registerConverter(LegacyType.ENTITY, new DataConverterEquipment());
+        registerConverter(LegacyType.BLOCK_ENTITY, new DataConverterSignText());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterMaterialId());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterPotionId());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterSpawnEgg());
+        registerConverter(LegacyType.ENTITY, new DataConverterMinecart());
+        registerConverter(LegacyType.BLOCK_ENTITY, new DataConverterMobSpawner());
+        registerConverter(LegacyType.ENTITY, new DataConverterUUID());
+        registerConverter(LegacyType.ENTITY, new DataConverterHealth());
+        registerConverter(LegacyType.ENTITY, new DataConverterSaddle());
+        registerConverter(LegacyType.ENTITY, new DataConverterHanging());
+        registerConverter(LegacyType.ENTITY, new DataConverterDropChances());
+        registerConverter(LegacyType.ENTITY, new DataConverterRiding());
+        registerConverter(LegacyType.ENTITY, new DataConverterArmorStand());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterBook());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterCookedFish());
+        registerConverter(LegacyType.ENTITY, new DataConverterZombie());
+        registerConverter(LegacyType.OPTIONS, new DataConverterVBO());
+        registerConverter(LegacyType.ENTITY, new DataConverterGuardian());
+        registerConverter(LegacyType.ENTITY, new DataConverterSkeleton());
+        registerConverter(LegacyType.ENTITY, new DataConverterZombieType());
+        registerConverter(LegacyType.ENTITY, new DataConverterHorse());
+        registerConverter(LegacyType.BLOCK_ENTITY, new DataConverterTileEntity());
+        registerConverter(LegacyType.ENTITY, new DataConverterEntity());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterBanner());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterPotionWater());
+        registerConverter(LegacyType.ENTITY, new DataConverterShulker());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterShulkerBoxItem());
+        registerConverter(LegacyType.BLOCK_ENTITY, new DataConverterShulkerBoxBlock());
+        registerConverter(LegacyType.OPTIONS, new DataConverterLang());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterTotem());
+        registerConverter(LegacyType.CHUNK, new DataConverterBedBlock());
+        registerConverter(LegacyType.ITEM_INSTANCE, new DataConverterBedItem());
+    }
+
+    private void registerEntityItemList(String type, String... keys) {
+        registerInspector(LegacyType.ENTITY, new DataInspectorItemList(type, keys));
+    }
+
+    private void registerEntityItemSingle(String type, String key) {
+        registerInspector(LegacyType.ENTITY, new DataInspectorItem(type, key));
+    }
+
+    private void registerEntityItemListEquipment(String type) {
+        registerEntityItemList(type, "ArmorItems", "HandItems");
+    }
+    private static final Map<String, ResourceLocation> OLD_ID_TO_KEY_MAP = new HashMap<>();
+
+    static {
+        final Map<String, ResourceLocation> map = OLD_ID_TO_KEY_MAP;
+        map.put("EntityItem", new ResourceLocation("item"));
+        map.put("EntityExperienceOrb", new ResourceLocation("xp_orb"));
+        map.put("EntityAreaEffectCloud", new ResourceLocation("area_effect_cloud"));
+        map.put("EntityGuardianElder", new ResourceLocation("elder_guardian"));
+        map.put("EntitySkeletonWither", new ResourceLocation("wither_skeleton"));
+        map.put("EntitySkeletonStray", new ResourceLocation("stray"));
+        map.put("EntityEgg", new ResourceLocation("egg"));
+        map.put("EntityLeash", new ResourceLocation("leash_knot"));
+        map.put("EntityPainting", new ResourceLocation("painting"));
+        map.put("EntityTippedArrow", new ResourceLocation("arrow"));
+        map.put("EntitySnowball", new ResourceLocation("snowball"));
+        map.put("EntityLargeFireball", new ResourceLocation("fireball"));
+        map.put("EntitySmallFireball", new ResourceLocation("small_fireball"));
+        map.put("EntityEnderPearl", new ResourceLocation("ender_pearl"));
+        map.put("EntityEnderSignal", new ResourceLocation("eye_of_ender_signal"));
+        map.put("EntityPotion", new ResourceLocation("potion"));
+        map.put("EntityThrownExpBottle", new ResourceLocation("xp_bottle"));
+        map.put("EntityItemFrame", new ResourceLocation("item_frame"));
+        map.put("EntityWitherSkull", new ResourceLocation("wither_skull"));
+        map.put("EntityTNTPrimed", new ResourceLocation("tnt"));
+        map.put("EntityFallingBlock", new ResourceLocation("falling_block"));
+        map.put("EntityFireworks", new ResourceLocation("fireworks_rocket"));
+        map.put("EntityZombieHusk", new ResourceLocation("husk"));
+        map.put("EntitySpectralArrow", new ResourceLocation("spectral_arrow"));
+        map.put("EntityShulkerBullet", new ResourceLocation("shulker_bullet"));
+        map.put("EntityDragonFireball", new ResourceLocation("dragon_fireball"));
+        map.put("EntityZombieVillager", new ResourceLocation("zombie_villager"));
+        map.put("EntityHorseSkeleton", new ResourceLocation("skeleton_horse"));
+        map.put("EntityHorseZombie", new ResourceLocation("zombie_horse"));
+        map.put("EntityArmorStand", new ResourceLocation("armor_stand"));
+        map.put("EntityHorseDonkey", new ResourceLocation("donkey"));
+        map.put("EntityHorseMule", new ResourceLocation("mule"));
+        map.put("EntityEvokerFangs", new ResourceLocation("evocation_fangs"));
+        map.put("EntityEvoker", new ResourceLocation("evocation_illager"));
+        map.put("EntityVex", new ResourceLocation("vex"));
+        map.put("EntityVindicator", new ResourceLocation("vindication_illager"));
+        map.put("EntityIllagerIllusioner", new ResourceLocation("illusion_illager"));
+        map.put("EntityMinecartCommandBlock", new ResourceLocation("commandblock_minecart"));
+        map.put("EntityBoat", new ResourceLocation("boat"));
+        map.put("EntityMinecartRideable", new ResourceLocation("minecart"));
+        map.put("EntityMinecartChest", new ResourceLocation("chest_minecart"));
+        map.put("EntityMinecartFurnace", new ResourceLocation("furnace_minecart"));
+        map.put("EntityMinecartTNT", new ResourceLocation("tnt_minecart"));
+        map.put("EntityMinecartHopper", new ResourceLocation("hopper_minecart"));
+        map.put("EntityMinecartMobSpawner", new ResourceLocation("spawner_minecart"));
+        map.put("EntityCreeper", new ResourceLocation("creeper"));
+        map.put("EntitySkeleton", new ResourceLocation("skeleton"));
+        map.put("EntitySpider", new ResourceLocation("spider"));
+        map.put("EntityGiantZombie", new ResourceLocation("giant"));
+        map.put("EntityZombie", new ResourceLocation("zombie"));
+        map.put("EntitySlime", new ResourceLocation("slime"));
+        map.put("EntityGhast", new ResourceLocation("ghast"));
+        map.put("EntityPigZombie", new ResourceLocation("zombie_pigman"));
+        map.put("EntityEnderman", new ResourceLocation("enderman"));
+        map.put("EntityCaveSpider", new ResourceLocation("cave_spider"));
+        map.put("EntitySilverfish", new ResourceLocation("silverfish"));
+        map.put("EntityBlaze", new ResourceLocation("blaze"));
+        map.put("EntityMagmaCube", new ResourceLocation("magma_cube"));
+        map.put("EntityEnderDragon", new ResourceLocation("ender_dragon"));
+        map.put("EntityWither", new ResourceLocation("wither"));
+        map.put("EntityBat", new ResourceLocation("bat"));
+        map.put("EntityWitch", new ResourceLocation("witch"));
+        map.put("EntityEndermite", new ResourceLocation("endermite"));
+        map.put("EntityGuardian", new ResourceLocation("guardian"));
+        map.put("EntityShulker", new ResourceLocation("shulker"));
+        map.put("EntityPig", new ResourceLocation("pig"));
+        map.put("EntitySheep", new ResourceLocation("sheep"));
+        map.put("EntityCow", new ResourceLocation("cow"));
+        map.put("EntityChicken", new ResourceLocation("chicken"));
+        map.put("EntitySquid", new ResourceLocation("squid"));
+        map.put("EntityWolf", new ResourceLocation("wolf"));
+        map.put("EntityMushroomCow", new ResourceLocation("mooshroom"));
+        map.put("EntitySnowman", new ResourceLocation("snowman"));
+        map.put("EntityOcelot", new ResourceLocation("ocelot"));
+        map.put("EntityIronGolem", new ResourceLocation("villager_golem"));
+        map.put("EntityHorse", new ResourceLocation("horse"));
+        map.put("EntityRabbit", new ResourceLocation("rabbit"));
+        map.put("EntityPolarBear", new ResourceLocation("polar_bear"));
+        map.put("EntityLlama", new ResourceLocation("llama"));
+        map.put("EntityLlamaSpit", new ResourceLocation("llama_spit"));
+        map.put("EntityParrot", new ResourceLocation("parrot"));
+        map.put("EntityVillager", new ResourceLocation("villager"));
+        map.put("EntityEnderCrystal", new ResourceLocation("ender_crystal"));
+        map.put("TileEntityFurnace", new ResourceLocation("furnace"));
+        map.put("TileEntityChest", new ResourceLocation("chest"));
+        map.put("TileEntityEnderChest", new ResourceLocation("ender_chest"));
+        map.put("TileEntityRecordPlayer", new ResourceLocation("jukebox"));
+        map.put("TileEntityDispenser", new ResourceLocation("dispenser"));
+        map.put("TileEntityDropper", new ResourceLocation("dropper"));
+        map.put("TileEntitySign", new ResourceLocation("sign"));
+        map.put("TileEntityMobSpawner", new ResourceLocation("mob_spawner"));
+        map.put("TileEntityNote", new ResourceLocation("noteblock"));
+        map.put("TileEntityPiston", new ResourceLocation("piston"));
+        map.put("TileEntityBrewingStand", new ResourceLocation("brewing_stand"));
+        map.put("TileEntityEnchantTable", new ResourceLocation("enchanting_table"));
+        map.put("TileEntityEnderPortal", new ResourceLocation("end_portal"));
+        map.put("TileEntityBeacon", new ResourceLocation("beacon"));
+        map.put("TileEntitySkull", new ResourceLocation("skull"));
+        map.put("TileEntityLightDetector", new ResourceLocation("daylight_detector"));
+        map.put("TileEntityHopper", new ResourceLocation("hopper"));
+        map.put("TileEntityComparator", new ResourceLocation("comparator"));
+        map.put("TileEntityFlowerPot", new ResourceLocation("flower_pot"));
+        map.put("TileEntityBanner", new ResourceLocation("banner"));
+        map.put("TileEntityStructure", new ResourceLocation("structure_block"));
+        map.put("TileEntityEndGateway", new ResourceLocation("end_gateway"));
+        map.put("TileEntityCommand", new ResourceLocation("command_block"));
+        map.put("TileEntityShulkerBox", new ResourceLocation("shulker_box"));
+        map.put("TileEntityBed", new ResourceLocation("bed"));
+    }
+
+    private static ResourceLocation getKey(String type) {
+        final ResourceLocation key = OLD_ID_TO_KEY_MAP.get(type);
+        if (key == null) {
+            throw new IllegalArgumentException("Unknown mapping for " + type);
+        }
+        return key;
+    }
+
+    private static void convertCompound(LegacyType type, CompoundTag cmp, String key, int sourceVer, int targetVer) {
+        cmp.put(key, convert(type, cmp.getCompound(key), sourceVer, targetVer));
+    }
+
+    private static void convertItem(CompoundTag nbttagcompound, String key, int sourceVer, int targetVer) {
+        if (nbttagcompound.contains(key, 10)) {
+            convertCompound(LegacyType.ITEM_INSTANCE, nbttagcompound, key, sourceVer, targetVer);
+        }
+    }
+
+    private static void convertItems(CompoundTag nbttagcompound, String key, int sourceVer, int targetVer) {
+        if (nbttagcompound.contains(key, 9)) {
+            ListTag nbttaglist = nbttagcompound.getList(key, 10);
+
+            for (int j = 0; j < nbttaglist.size(); ++j) {
+                nbttaglist.set(j, convert(LegacyType.ITEM_INSTANCE, nbttaglist.getCompound(j), sourceVer, targetVer));
+            }
+        }
+
+    }
+
+    private static class DataConverterEquipment implements DataConverter {
+
+        DataConverterEquipment() {}
+
+        public int getDataVersion() {
+            return 100;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            ListTag nbttaglist = cmp.getList("Equipment", 10);
+            ListTag nbttaglist1;
+
+            if (!nbttaglist.isEmpty() && !cmp.contains("HandItems", 10)) {
+                nbttaglist1 = new ListTag();
+                nbttaglist1.add(nbttaglist.get(0));
+                nbttaglist1.add(new CompoundTag());
+                cmp.put("HandItems", nbttaglist1);
+            }
+
+            if (nbttaglist.size() > 1 && !cmp.contains("ArmorItem", 10)) {
+                nbttaglist1 = new ListTag();
+                nbttaglist1.add(nbttaglist.get(1));
+                nbttaglist1.add(nbttaglist.get(2));
+                nbttaglist1.add(nbttaglist.get(3));
+                nbttaglist1.add(nbttaglist.get(4));
+                cmp.put("ArmorItems", nbttaglist1);
+            }
+
+            cmp.remove("Equipment");
+            if (cmp.contains("DropChances", 9)) {
+                nbttaglist1 = cmp.getList("DropChances", 5);
+                ListTag nbttaglist2;
+
+                if (!cmp.contains("HandDropChances", 10)) {
+                    nbttaglist2 = new ListTag();
+                    nbttaglist2.add(FloatTag.valueOf(nbttaglist1.getShort(0)));
+                    nbttaglist2.add(FloatTag.valueOf(0.0F));
+                    cmp.put("HandDropChances", nbttaglist2);
+                }
+
+                if (!cmp.contains("ArmorDropChances", 10)) {
+                    nbttaglist2 = new ListTag();
+                    nbttaglist2.add(FloatTag.valueOf(nbttaglist1.getShort(1)));
+                    nbttaglist2.add(FloatTag.valueOf(nbttaglist1.getShort(2)));
+                    nbttaglist2.add(FloatTag.valueOf(nbttaglist1.getShort(3)));
+                    nbttaglist2.add(FloatTag.valueOf(nbttaglist1.getShort(4)));
+                    cmp.put("ArmorDropChances", nbttaglist2);
+                }
+
+                cmp.remove("DropChances");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorBlockEntity implements DataInspector {
+
+        private static final Map<String, String> b = Maps.newHashMap();
+        private static final Map<String, String> c = Maps.newHashMap();
+
+        DataInspectorBlockEntity() {}
+
+        @Nullable
+        private static String convertEntityId(int i, String s) {
+            String key = new ResourceLocation(s).toString();
+            if (i < 515 && DataInspectorBlockEntity.b.containsKey(key)) {
+                return DataInspectorBlockEntity.b.get(key);
+            } else {
+                return DataInspectorBlockEntity.c.get(key);
+            }
+        }
+
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (cmp.contains("tag", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+                if (nbttagcompound1.contains("BlockEntityTag", 10)) {
+                    CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("BlockEntityTag");
+                    String s = cmp.getString("id");
+                    String s1 = convertEntityId(sourceVer, s);
+                    boolean flag;
+
+                    if (s1 == null) {
+                        // CraftBukkit - Remove unnecessary warning (occurs when deserializing a Shulker Box item)
+                        // DataInspectorBlockEntity.a.warn("Unable to resolve BlockEntity for ItemInstance: {}", s);
+                        flag = false;
+                    } else {
+                        flag = !nbttagcompound2.contains("id");
+                        nbttagcompound2.putString("id", s1);
+                    }
+
+                    convert(LegacyType.BLOCK_ENTITY, nbttagcompound2, sourceVer, targetVer);
+                    if (flag) {
+                        nbttagcompound2.remove("id");
+                    }
+                }
+            }
+            return cmp;
+        }
+
+        static {
+            Map<String, String> map = DataInspectorBlockEntity.b;
+
+            map.put("minecraft:furnace", "Furnace");
+            map.put("minecraft:lit_furnace", "Furnace");
+            map.put("minecraft:chest", "Chest");
+            map.put("minecraft:trapped_chest", "Chest");
+            map.put("minecraft:ender_chest", "EnderChest");
+            map.put("minecraft:jukebox", "RecordPlayer");
+            map.put("minecraft:dispenser", "Trap");
+            map.put("minecraft:dropper", "Dropper");
+            map.put("minecraft:sign", "Sign");
+            map.put("minecraft:mob_spawner", "MobSpawner");
+            map.put("minecraft:noteblock", "Music");
+            map.put("minecraft:brewing_stand", "Cauldron");
+            map.put("minecraft:enhanting_table", "EnchantTable");
+            map.put("minecraft:command_block", "CommandBlock");
+            map.put("minecraft:beacon", "Beacon");
+            map.put("minecraft:skull", "Skull");
+            map.put("minecraft:daylight_detector", "DLDetector");
+            map.put("minecraft:hopper", "Hopper");
+            map.put("minecraft:banner", "Banner");
+            map.put("minecraft:flower_pot", "FlowerPot");
+            map.put("minecraft:repeating_command_block", "CommandBlock");
+            map.put("minecraft:chain_command_block", "CommandBlock");
+            map.put("minecraft:standing_sign", "Sign");
+            map.put("minecraft:wall_sign", "Sign");
+            map.put("minecraft:piston_head", "Piston");
+            map.put("minecraft:daylight_detector_inverted", "DLDetector");
+            map.put("minecraft:unpowered_comparator", "Comparator");
+            map.put("minecraft:powered_comparator", "Comparator");
+            map.put("minecraft:wall_banner", "Banner");
+            map.put("minecraft:standing_banner", "Banner");
+            map.put("minecraft:structure_block", "Structure");
+            map.put("minecraft:end_portal", "Airportal");
+            map.put("minecraft:end_gateway", "EndGateway");
+            map.put("minecraft:shield", "Shield");
+            map = DataInspectorBlockEntity.c;
+            map.put("minecraft:furnace", "minecraft:furnace");
+            map.put("minecraft:lit_furnace", "minecraft:furnace");
+            map.put("minecraft:chest", "minecraft:chest");
+            map.put("minecraft:trapped_chest", "minecraft:chest");
+            map.put("minecraft:ender_chest", "minecraft:enderchest");
+            map.put("minecraft:jukebox", "minecraft:jukebox");
+            map.put("minecraft:dispenser", "minecraft:dispenser");
+            map.put("minecraft:dropper", "minecraft:dropper");
+            map.put("minecraft:sign", "minecraft:sign");
+            map.put("minecraft:mob_spawner", "minecraft:mob_spawner");
+            map.put("minecraft:noteblock", "minecraft:noteblock");
+            map.put("minecraft:brewing_stand", "minecraft:brewing_stand");
+            map.put("minecraft:enhanting_table", "minecraft:enchanting_table");
+            map.put("minecraft:command_block", "minecraft:command_block");
+            map.put("minecraft:beacon", "minecraft:beacon");
+            map.put("minecraft:skull", "minecraft:skull");
+            map.put("minecraft:daylight_detector", "minecraft:daylight_detector");
+            map.put("minecraft:hopper", "minecraft:hopper");
+            map.put("minecraft:banner", "minecraft:banner");
+            map.put("minecraft:flower_pot", "minecraft:flower_pot");
+            map.put("minecraft:repeating_command_block", "minecraft:command_block");
+            map.put("minecraft:chain_command_block", "minecraft:command_block");
+            map.put("minecraft:shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:white_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:orange_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:magenta_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:light_blue_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:yellow_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:lime_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:pink_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:gray_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:silver_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:cyan_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:purple_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:blue_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:brown_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:green_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:red_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:black_shulker_box", "minecraft:shulker_box");
+            map.put("minecraft:bed", "minecraft:bed");
+            map.put("minecraft:standing_sign", "minecraft:sign");
+            map.put("minecraft:wall_sign", "minecraft:sign");
+            map.put("minecraft:piston_head", "minecraft:piston");
+            map.put("minecraft:daylight_detector_inverted", "minecraft:daylight_detector");
+            map.put("minecraft:unpowered_comparator", "minecraft:comparator");
+            map.put("minecraft:powered_comparator", "minecraft:comparator");
+            map.put("minecraft:wall_banner", "minecraft:banner");
+            map.put("minecraft:standing_banner", "minecraft:banner");
+            map.put("minecraft:structure_block", "minecraft:structure_block");
+            map.put("minecraft:end_portal", "minecraft:end_portal");
+            map.put("minecraft:end_gateway", "minecraft:end_gateway");
+            map.put("minecraft:shield", "minecraft:shield");
+        }
+    }
+
+    private static class DataInspectorEntity implements DataInspector {
+
+        private static final Logger a = LogManager.getLogger();
+
+        DataInspectorEntity() {}
+
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+            if (nbttagcompound1.contains("EntityTag", 10)) {
+                CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("EntityTag");
+                String s = cmp.getString("id");
+                String s1;
+
+                if ("minecraft:armor_stand".equals(s)) {
+                    s1 = sourceVer < 515 ? "ArmorStand" : "minecraft:armor_stand";
+                } else {
+                    if (!"minecraft:spawn_egg".equals(s)) {
+                        return cmp;
+                    }
+
+                    s1 = nbttagcompound2.getString("id");
+                }
+
+                boolean flag;
+
+                flag = !nbttagcompound2.contains("id", 8);
+                nbttagcompound2.putString("id", s1);
+
+                convert(LegacyType.ENTITY, nbttagcompound2, sourceVer, targetVer);
+                if (flag) {
+                    nbttagcompound2.remove("id");
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+
+    private abstract static class DataInspectorTagged implements DataInspector {
+
+        private final ResourceLocation key;
+
+        DataInspectorTagged(String type) {
+            this.key = getKey(type);
+        }
+
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (this.key.equals(new ResourceLocation(cmp.getString("id")))) {
+                cmp = this.inspectChecked(cmp, sourceVer, targetVer);
+            }
+
+            return cmp;
+        }
+
+        abstract CompoundTag inspectChecked(CompoundTag nbttagcompound, int sourceVer, int targetVer);
+    }
+
+    private static class DataInspectorItemList extends DataInspectorTagged {
+
+        private final String[] keys;
+
+        DataInspectorItemList(String oclass, String... astring) {
+            super(oclass);
+            this.keys = astring;
+        }
+
+        CompoundTag inspectChecked(CompoundTag nbttagcompound, int sourceVer, int targetVer) {
+            for (String s : this.keys) {
+                DataConverters.convertItems(nbttagcompound, s, sourceVer, targetVer);
+            }
+
+            return nbttagcompound;
+        }
+    }
+    private static class DataInspectorItem extends DataInspectorTagged {
+
+        private final String[] keys;
+
+        DataInspectorItem(String oclass, String... astring) {
+            super(oclass);
+            this.keys = astring;
+        }
+
+        CompoundTag inspectChecked(CompoundTag nbttagcompound, int sourceVer, int targetVer) {
+            for (String key : this.keys) {
+                DataConverters.convertItem(nbttagcompound, key, sourceVer, targetVer);
+            }
+
+            return nbttagcompound;
+        }
+    }
+
+    private static class DataConverterMaterialId implements DataConverter {
+
+        private static final String[] materials = new String[2268];
+
+        DataConverterMaterialId() {}
+
+        public int getDataVersion() {
+            return 102;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if (cmp.contains("id", 99)) {
+                short short0 = cmp.getShort("id");
+
+                if (short0 > 0 && short0 < materials.length && materials[short0] != null) {
+                    cmp.putString("id", materials[short0]);
+                }
+            }
+
+            return cmp;
+        }
+
+        static {
+            materials[1] = "minecraft:stone";
+            materials[2] = "minecraft:grass";
+            materials[3] = "minecraft:dirt";
+            materials[4] = "minecraft:cobblestone";
+            materials[5] = "minecraft:planks";
+            materials[6] = "minecraft:sapling";
+            materials[7] = "minecraft:bedrock";
+            materials[8] = "minecraft:flowing_water";
+            materials[9] = "minecraft:water";
+            materials[10] = "minecraft:flowing_lava";
+            materials[11] = "minecraft:lava";
+            materials[12] = "minecraft:sand";
+            materials[13] = "minecraft:gravel";
+            materials[14] = "minecraft:gold_ore";
+            materials[15] = "minecraft:iron_ore";
+            materials[16] = "minecraft:coal_ore";
+            materials[17] = "minecraft:log";
+            materials[18] = "minecraft:leaves";
+            materials[19] = "minecraft:sponge";
+            materials[20] = "minecraft:glass";
+            materials[21] = "minecraft:lapis_ore";
+            materials[22] = "minecraft:lapis_block";
+            materials[23] = "minecraft:dispenser";
+            materials[24] = "minecraft:sandstone";
+            materials[25] = "minecraft:noteblock";
+            materials[27] = "minecraft:golden_rail";
+            materials[28] = "minecraft:detector_rail";
+            materials[29] = "minecraft:sticky_piston";
+            materials[30] = "minecraft:web";
+            materials[31] = "minecraft:tallgrass";
+            materials[32] = "minecraft:deadbush";
+            materials[33] = "minecraft:piston";
+            materials[35] = "minecraft:wool";
+            materials[37] = "minecraft:yellow_flower";
+            materials[38] = "minecraft:red_flower";
+            materials[39] = "minecraft:brown_mushroom";
+            materials[40] = "minecraft:red_mushroom";
+            materials[41] = "minecraft:gold_block";
+            materials[42] = "minecraft:iron_block";
+            materials[43] = "minecraft:double_stone_slab";
+            materials[44] = "minecraft:stone_slab";
+            materials[45] = "minecraft:brick_block";
+            materials[46] = "minecraft:tnt";
+            materials[47] = "minecraft:bookshelf";
+            materials[48] = "minecraft:mossy_cobblestone";
+            materials[49] = "minecraft:obsidian";
+            materials[50] = "minecraft:torch";
+            materials[51] = "minecraft:fire";
+            materials[52] = "minecraft:mob_spawner";
+            materials[53] = "minecraft:oak_stairs";
+            materials[54] = "minecraft:chest";
+            materials[56] = "minecraft:diamond_ore";
+            materials[57] = "minecraft:diamond_block";
+            materials[58] = "minecraft:crafting_table";
+            materials[60] = "minecraft:farmland";
+            materials[61] = "minecraft:furnace";
+            materials[62] = "minecraft:lit_furnace";
+            materials[65] = "minecraft:ladder";
+            materials[66] = "minecraft:rail";
+            materials[67] = "minecraft:stone_stairs";
+            materials[69] = "minecraft:lever";
+            materials[70] = "minecraft:stone_pressure_plate";
+            materials[72] = "minecraft:wooden_pressure_plate";
+            materials[73] = "minecraft:redstone_ore";
+            materials[76] = "minecraft:redstone_torch";
+            materials[77] = "minecraft:stone_button";
+            materials[78] = "minecraft:snow_layer";
+            materials[79] = "minecraft:ice";
+            materials[80] = "minecraft:snow";
+            materials[81] = "minecraft:cactus";
+            materials[82] = "minecraft:clay";
+            materials[84] = "minecraft:jukebox";
+            materials[85] = "minecraft:fence";
+            materials[86] = "minecraft:pumpkin";
+            materials[87] = "minecraft:netherrack";
+            materials[88] = "minecraft:soul_sand";
+            materials[89] = "minecraft:glowstone";
+            materials[90] = "minecraft:portal";
+            materials[91] = "minecraft:lit_pumpkin";
+            materials[95] = "minecraft:stained_glass";
+            materials[96] = "minecraft:trapdoor";
+            materials[97] = "minecraft:monster_egg";
+            materials[98] = "minecraft:stonebrick";
+            materials[99] = "minecraft:brown_mushroom_block";
+            materials[100] = "minecraft:red_mushroom_block";
+            materials[101] = "minecraft:iron_bars";
+            materials[102] = "minecraft:glass_pane";
+            materials[103] = "minecraft:melon_block";
+            materials[106] = "minecraft:vine";
+            materials[107] = "minecraft:fence_gate";
+            materials[108] = "minecraft:brick_stairs";
+            materials[109] = "minecraft:stone_brick_stairs";
+            materials[110] = "minecraft:mycelium";
+            materials[111] = "minecraft:waterlily";
+            materials[112] = "minecraft:nether_brick";
+            materials[113] = "minecraft:nether_brick_fence";
+            materials[114] = "minecraft:nether_brick_stairs";
+            materials[116] = "minecraft:enchanting_table";
+            materials[119] = "minecraft:end_portal";
+            materials[120] = "minecraft:end_portal_frame";
+            materials[121] = "minecraft:end_stone";
+            materials[122] = "minecraft:dragon_egg";
+            materials[123] = "minecraft:redstone_lamp";
+            materials[125] = "minecraft:double_wooden_slab";
+            materials[126] = "minecraft:wooden_slab";
+            materials[127] = "minecraft:cocoa";
+            materials[128] = "minecraft:sandstone_stairs";
+            materials[129] = "minecraft:emerald_ore";
+            materials[130] = "minecraft:ender_chest";
+            materials[131] = "minecraft:tripwire_hook";
+            materials[133] = "minecraft:emerald_block";
+            materials[134] = "minecraft:spruce_stairs";
+            materials[135] = "minecraft:birch_stairs";
+            materials[136] = "minecraft:jungle_stairs";
+            materials[137] = "minecraft:command_block";
+            materials[138] = "minecraft:beacon";
+            materials[139] = "minecraft:cobblestone_wall";
+            materials[141] = "minecraft:carrots";
+            materials[142] = "minecraft:potatoes";
+            materials[143] = "minecraft:wooden_button";
+            materials[145] = "minecraft:anvil";
+            materials[146] = "minecraft:trapped_chest";
+            materials[147] = "minecraft:light_weighted_pressure_plate";
+            materials[148] = "minecraft:heavy_weighted_pressure_plate";
+            materials[151] = "minecraft:daylight_detector";
+            materials[152] = "minecraft:redstone_block";
+            materials[153] = "minecraft:quartz_ore";
+            materials[154] = "minecraft:hopper";
+            materials[155] = "minecraft:quartz_block";
+            materials[156] = "minecraft:quartz_stairs";
+            materials[157] = "minecraft:activator_rail";
+            materials[158] = "minecraft:dropper";
+            materials[159] = "minecraft:stained_hardened_clay";
+            materials[160] = "minecraft:stained_glass_pane";
+            materials[161] = "minecraft:leaves2";
+            materials[162] = "minecraft:log2";
+            materials[163] = "minecraft:acacia_stairs";
+            materials[164] = "minecraft:dark_oak_stairs";
+            materials[170] = "minecraft:hay_block";
+            materials[171] = "minecraft:carpet";
+            materials[172] = "minecraft:hardened_clay";
+            materials[173] = "minecraft:coal_block";
+            materials[174] = "minecraft:packed_ice";
+            materials[175] = "minecraft:double_plant";
+            materials[256] = "minecraft:iron_shovel";
+            materials[257] = "minecraft:iron_pickaxe";
+            materials[258] = "minecraft:iron_axe";
+            materials[259] = "minecraft:flint_and_steel";
+            materials[260] = "minecraft:apple";
+            materials[261] = "minecraft:bow";
+            materials[262] = "minecraft:arrow";
+            materials[263] = "minecraft:coal";
+            materials[264] = "minecraft:diamond";
+            materials[265] = "minecraft:iron_ingot";
+            materials[266] = "minecraft:gold_ingot";
+            materials[267] = "minecraft:iron_sword";
+            materials[268] = "minecraft:wooden_sword";
+            materials[269] = "minecraft:wooden_shovel";
+            materials[270] = "minecraft:wooden_pickaxe";
+            materials[271] = "minecraft:wooden_axe";
+            materials[272] = "minecraft:stone_sword";
+            materials[273] = "minecraft:stone_shovel";
+            materials[274] = "minecraft:stone_pickaxe";
+            materials[275] = "minecraft:stone_axe";
+            materials[276] = "minecraft:diamond_sword";
+            materials[277] = "minecraft:diamond_shovel";
+            materials[278] = "minecraft:diamond_pickaxe";
+            materials[279] = "minecraft:diamond_axe";
+            materials[280] = "minecraft:stick";
+            materials[281] = "minecraft:bowl";
+            materials[282] = "minecraft:mushroom_stew";
+            materials[283] = "minecraft:golden_sword";
+            materials[284] = "minecraft:golden_shovel";
+            materials[285] = "minecraft:golden_pickaxe";
+            materials[286] = "minecraft:golden_axe";
+            materials[287] = "minecraft:string";
+            materials[288] = "minecraft:feather";
+            materials[289] = "minecraft:gunpowder";
+            materials[290] = "minecraft:wooden_hoe";
+            materials[291] = "minecraft:stone_hoe";
+            materials[292] = "minecraft:iron_hoe";
+            materials[293] = "minecraft:diamond_hoe";
+            materials[294] = "minecraft:golden_hoe";
+            materials[295] = "minecraft:wheat_seeds";
+            materials[296] = "minecraft:wheat";
+            materials[297] = "minecraft:bread";
+            materials[298] = "minecraft:leather_helmet";
+            materials[299] = "minecraft:leather_chestplate";
+            materials[300] = "minecraft:leather_leggings";
+            materials[301] = "minecraft:leather_boots";
+            materials[302] = "minecraft:chainmail_helmet";
+            materials[303] = "minecraft:chainmail_chestplate";
+            materials[304] = "minecraft:chainmail_leggings";
+            materials[305] = "minecraft:chainmail_boots";
+            materials[306] = "minecraft:iron_helmet";
+            materials[307] = "minecraft:iron_chestplate";
+            materials[308] = "minecraft:iron_leggings";
+            materials[309] = "minecraft:iron_boots";
+            materials[310] = "minecraft:diamond_helmet";
+            materials[311] = "minecraft:diamond_chestplate";
+            materials[312] = "minecraft:diamond_leggings";
+            materials[313] = "minecraft:diamond_boots";
+            materials[314] = "minecraft:golden_helmet";
+            materials[315] = "minecraft:golden_chestplate";
+            materials[316] = "minecraft:golden_leggings";
+            materials[317] = "minecraft:golden_boots";
+            materials[318] = "minecraft:flint";
+            materials[319] = "minecraft:porkchop";
+            materials[320] = "minecraft:cooked_porkchop";
+            materials[321] = "minecraft:painting";
+            materials[322] = "minecraft:golden_apple";
+            materials[323] = "minecraft:sign";
+            materials[324] = "minecraft:wooden_door";
+            materials[325] = "minecraft:bucket";
+            materials[326] = "minecraft:water_bucket";
+            materials[327] = "minecraft:lava_bucket";
+            materials[328] = "minecraft:minecart";
+            materials[329] = "minecraft:saddle";
+            materials[330] = "minecraft:iron_door";
+            materials[331] = "minecraft:redstone";
+            materials[332] = "minecraft:snowball";
+            materials[333] = "minecraft:boat";
+            materials[334] = "minecraft:leather";
+            materials[335] = "minecraft:milk_bucket";
+            materials[336] = "minecraft:brick";
+            materials[337] = "minecraft:clay_ball";
+            materials[338] = "minecraft:reeds";
+            materials[339] = "minecraft:paper";
+            materials[340] = "minecraft:book";
+            materials[341] = "minecraft:slime_ball";
+            materials[342] = "minecraft:chest_minecart";
+            materials[343] = "minecraft:furnace_minecart";
+            materials[344] = "minecraft:egg";
+            materials[345] = "minecraft:compass";
+            materials[346] = "minecraft:fishing_rod";
+            materials[347] = "minecraft:clock";
+            materials[348] = "minecraft:glowstone_dust";
+            materials[349] = "minecraft:fish";
+            materials[350] = "minecraft:cooked_fish"; // Paper - cooked_fished -> cooked_fish
+            materials[351] = "minecraft:dye";
+            materials[352] = "minecraft:bone";
+            materials[353] = "minecraft:sugar";
+            materials[354] = "minecraft:cake";
+            materials[355] = "minecraft:bed";
+            materials[356] = "minecraft:repeater";
+            materials[357] = "minecraft:cookie";
+            materials[358] = "minecraft:filled_map";
+            materials[359] = "minecraft:shears";
+            materials[360] = "minecraft:melon";
+            materials[361] = "minecraft:pumpkin_seeds";
+            materials[362] = "minecraft:melon_seeds";
+            materials[363] = "minecraft:beef";
+            materials[364] = "minecraft:cooked_beef";
+            materials[365] = "minecraft:chicken";
+            materials[366] = "minecraft:cooked_chicken";
+            materials[367] = "minecraft:rotten_flesh";
+            materials[368] = "minecraft:ender_pearl";
+            materials[369] = "minecraft:blaze_rod";
+            materials[370] = "minecraft:ghast_tear";
+            materials[371] = "minecraft:gold_nugget";
+            materials[372] = "minecraft:nether_wart";
+            materials[373] = "minecraft:potion";
+            materials[374] = "minecraft:glass_bottle";
+            materials[375] = "minecraft:spider_eye";
+            materials[376] = "minecraft:fermented_spider_eye";
+            materials[377] = "minecraft:blaze_powder";
+            materials[378] = "minecraft:magma_cream";
+            materials[379] = "minecraft:brewing_stand";
+            materials[380] = "minecraft:cauldron";
+            materials[381] = "minecraft:ender_eye";
+            materials[382] = "minecraft:speckled_melon";
+            materials[383] = "minecraft:spawn_egg";
+            materials[384] = "minecraft:experience_bottle";
+            materials[385] = "minecraft:fire_charge";
+            materials[386] = "minecraft:writable_book";
+            materials[387] = "minecraft:written_book";
+            materials[388] = "minecraft:emerald";
+            materials[389] = "minecraft:item_frame";
+            materials[390] = "minecraft:flower_pot";
+            materials[391] = "minecraft:carrot";
+            materials[392] = "minecraft:potato";
+            materials[393] = "minecraft:baked_potato";
+            materials[394] = "minecraft:poisonous_potato";
+            materials[395] = "minecraft:map";
+            materials[396] = "minecraft:golden_carrot";
+            materials[397] = "minecraft:skull";
+            materials[398] = "minecraft:carrot_on_a_stick";
+            materials[399] = "minecraft:nether_star";
+            materials[400] = "minecraft:pumpkin_pie";
+            materials[401] = "minecraft:fireworks";
+            materials[402] = "minecraft:firework_charge";
+            materials[403] = "minecraft:enchanted_book";
+            materials[404] = "minecraft:comparator";
+            materials[405] = "minecraft:netherbrick";
+            materials[406] = "minecraft:quartz";
+            materials[407] = "minecraft:tnt_minecart";
+            materials[408] = "minecraft:hopper_minecart";
+            materials[417] = "minecraft:iron_horse_armor";
+            materials[418] = "minecraft:golden_horse_armor";
+            materials[419] = "minecraft:diamond_horse_armor";
+            materials[420] = "minecraft:lead";
+            materials[421] = "minecraft:name_tag";
+            materials[422] = "minecraft:command_block_minecart";
+            materials[2256] = "minecraft:record_13";
+            materials[2257] = "minecraft:record_cat";
+            materials[2258] = "minecraft:record_blocks";
+            materials[2259] = "minecraft:record_chirp";
+            materials[2260] = "minecraft:record_far";
+            materials[2261] = "minecraft:record_mall";
+            materials[2262] = "minecraft:record_mellohi";
+            materials[2263] = "minecraft:record_stal";
+            materials[2264] = "minecraft:record_strad";
+            materials[2265] = "minecraft:record_ward";
+            materials[2266] = "minecraft:record_11";
+            materials[2267] = "minecraft:record_wait";
+            // Paper start
+            materials[409] = "minecraft:prismarine_shard";
+            materials[410] = "minecraft:prismarine_crystals";
+            materials[411] = "minecraft:rabbit";
+            materials[412] = "minecraft:cooked_rabbit";
+            materials[413] = "minecraft:rabbit_stew";
+            materials[414] = "minecraft:rabbit_foot";
+            materials[415] = "minecraft:rabbit_hide";
+            materials[416] = "minecraft:armor_stand";
+            materials[423] = "minecraft:mutton";
+            materials[424] = "minecraft:cooked_mutton";
+            materials[425] = "minecraft:banner";
+            materials[426] = "minecraft:end_crystal";
+            materials[427] = "minecraft:spruce_door";
+            materials[428] = "minecraft:birch_door";
+            materials[429] = "minecraft:jungle_door";
+            materials[430] = "minecraft:acacia_door";
+            materials[431] = "minecraft:dark_oak_door";
+            materials[432] = "minecraft:chorus_fruit";
+            materials[433] = "minecraft:chorus_fruit_popped";
+            materials[434] = "minecraft:beetroot";
+            materials[435] = "minecraft:beetroot_seeds";
+            materials[436] = "minecraft:beetroot_soup";
+            materials[437] = "minecraft:dragon_breath";
+            materials[438] = "minecraft:splash_potion";
+            materials[439] = "minecraft:spectral_arrow";
+            materials[440] = "minecraft:tipped_arrow";
+            materials[441] = "minecraft:lingering_potion";
+            materials[442] = "minecraft:shield";
+            materials[443] = "minecraft:elytra";
+            materials[444] = "minecraft:spruce_boat";
+            materials[445] = "minecraft:birch_boat";
+            materials[446] = "minecraft:jungle_boat";
+            materials[447] = "minecraft:acacia_boat";
+            materials[448] = "minecraft:dark_oak_boat";
+            materials[449] = "minecraft:totem_of_undying";
+            materials[450] = "minecraft:shulker_shell";
+            materials[452] = "minecraft:iron_nugget";
+            materials[453] = "minecraft:knowledge_book";
+            // Paper end
+        }
+    }
+
+    private static class DataConverterArmorStand implements DataConverter {
+
+        DataConverterArmorStand() {}
+
+        public int getDataVersion() {
+            return 147;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("ArmorStand".equals(cmp.getString("id")) && cmp.getBoolean("Silent") && !cmp.getBoolean("Marker")) {
+                cmp.remove("Silent");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterBanner implements DataConverter {
+
+        DataConverterBanner() {}
+
+        public int getDataVersion() {
+            return 804;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:banner".equals(cmp.getString("id")) && cmp.contains("tag", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+                if (nbttagcompound1.contains("BlockEntityTag", 10)) {
+                    CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("BlockEntityTag");
+
+                    if (nbttagcompound2.contains("Base", 99)) {
+                        cmp.putShort("Damage", (short) (nbttagcompound2.getShort("Base") & 15));
+                        if (nbttagcompound1.contains("display", 10)) {
+                            CompoundTag nbttagcompound3 = nbttagcompound1.getCompound("display");
+
+                            if (nbttagcompound3.contains("Lore", 9)) {
+                                ListTag nbttaglist = nbttagcompound3.getList("Lore", 8);
+
+                                if (nbttaglist.size() == 1 && "(+NBT)".equals(nbttaglist.getString(0))) {
+                                    return cmp;
+                                }
+                            }
+                        }
+
+                        nbttagcompound2.remove("Base");
+                        if (nbttagcompound2.isEmpty()) {
+                            nbttagcompound1.remove("BlockEntityTag");
+                        }
+
+                        if (nbttagcompound1.isEmpty()) {
+                            cmp.remove("tag");
+                        }
+                    }
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterPotionId implements DataConverter {
+
+        private static final String[] potions = new String[128];
+
+        DataConverterPotionId() {}
+
+        public int getDataVersion() {
+            return 102;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:potion".equals(cmp.getString("id"))) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+                short short0 = cmp.getShort("Damage");
+
+                if (!nbttagcompound1.contains("Potion", 8)) {
+                    String s = DataConverterPotionId.potions[short0 & 127];
+
+                    nbttagcompound1.putString("Potion", s == null ? "minecraft:water" : s);
+                    cmp.put("tag", nbttagcompound1);
+                    if ((short0 & 16384) == 16384) {
+                        cmp.putString("id", "minecraft:splash_potion");
+                    }
+                }
+
+                if (short0 != 0) {
+                    cmp.putShort("Damage", (short) 0);
+                }
+            }
+
+            return cmp;
+        }
+
+        static {
+            DataConverterPotionId.potions[0] = "minecraft:water";
+            DataConverterPotionId.potions[1] = "minecraft:regeneration";
+            DataConverterPotionId.potions[2] = "minecraft:swiftness";
+            DataConverterPotionId.potions[3] = "minecraft:fire_resistance";
+            DataConverterPotionId.potions[4] = "minecraft:poison";
+            DataConverterPotionId.potions[5] = "minecraft:healing";
+            DataConverterPotionId.potions[6] = "minecraft:night_vision";
+            DataConverterPotionId.potions[7] = null;
+            DataConverterPotionId.potions[8] = "minecraft:weakness";
+            DataConverterPotionId.potions[9] = "minecraft:strength";
+            DataConverterPotionId.potions[10] = "minecraft:slowness";
+            DataConverterPotionId.potions[11] = "minecraft:leaping";
+            DataConverterPotionId.potions[12] = "minecraft:harming";
+            DataConverterPotionId.potions[13] = "minecraft:water_breathing";
+            DataConverterPotionId.potions[14] = "minecraft:invisibility";
+            DataConverterPotionId.potions[15] = null;
+            DataConverterPotionId.potions[16] = "minecraft:awkward";
+            DataConverterPotionId.potions[17] = "minecraft:regeneration";
+            DataConverterPotionId.potions[18] = "minecraft:swiftness";
+            DataConverterPotionId.potions[19] = "minecraft:fire_resistance";
+            DataConverterPotionId.potions[20] = "minecraft:poison";
+            DataConverterPotionId.potions[21] = "minecraft:healing";
+            DataConverterPotionId.potions[22] = "minecraft:night_vision";
+            DataConverterPotionId.potions[23] = null;
+            DataConverterPotionId.potions[24] = "minecraft:weakness";
+            DataConverterPotionId.potions[25] = "minecraft:strength";
+            DataConverterPotionId.potions[26] = "minecraft:slowness";
+            DataConverterPotionId.potions[27] = "minecraft:leaping";
+            DataConverterPotionId.potions[28] = "minecraft:harming";
+            DataConverterPotionId.potions[29] = "minecraft:water_breathing";
+            DataConverterPotionId.potions[30] = "minecraft:invisibility";
+            DataConverterPotionId.potions[31] = null;
+            DataConverterPotionId.potions[32] = "minecraft:thick";
+            DataConverterPotionId.potions[33] = "minecraft:strong_regeneration";
+            DataConverterPotionId.potions[34] = "minecraft:strong_swiftness";
+            DataConverterPotionId.potions[35] = "minecraft:fire_resistance";
+            DataConverterPotionId.potions[36] = "minecraft:strong_poison";
+            DataConverterPotionId.potions[37] = "minecraft:strong_healing";
+            DataConverterPotionId.potions[38] = "minecraft:night_vision";
+            DataConverterPotionId.potions[39] = null;
+            DataConverterPotionId.potions[40] = "minecraft:weakness";
+            DataConverterPotionId.potions[41] = "minecraft:strong_strength";
+            DataConverterPotionId.potions[42] = "minecraft:slowness";
+            DataConverterPotionId.potions[43] = "minecraft:strong_leaping";
+            DataConverterPotionId.potions[44] = "minecraft:strong_harming";
+            DataConverterPotionId.potions[45] = "minecraft:water_breathing";
+            DataConverterPotionId.potions[46] = "minecraft:invisibility";
+            DataConverterPotionId.potions[47] = null;
+            DataConverterPotionId.potions[48] = null;
+            DataConverterPotionId.potions[49] = "minecraft:strong_regeneration";
+            DataConverterPotionId.potions[50] = "minecraft:strong_swiftness";
+            DataConverterPotionId.potions[51] = "minecraft:fire_resistance";
+            DataConverterPotionId.potions[52] = "minecraft:strong_poison";
+            DataConverterPotionId.potions[53] = "minecraft:strong_healing";
+            DataConverterPotionId.potions[54] = "minecraft:night_vision";
+            DataConverterPotionId.potions[55] = null;
+            DataConverterPotionId.potions[56] = "minecraft:weakness";
+            DataConverterPotionId.potions[57] = "minecraft:strong_strength";
+            DataConverterPotionId.potions[58] = "minecraft:slowness";
+            DataConverterPotionId.potions[59] = "minecraft:strong_leaping";
+            DataConverterPotionId.potions[60] = "minecraft:strong_harming";
+            DataConverterPotionId.potions[61] = "minecraft:water_breathing";
+            DataConverterPotionId.potions[62] = "minecraft:invisibility";
+            DataConverterPotionId.potions[63] = null;
+            DataConverterPotionId.potions[64] = "minecraft:mundane";
+            DataConverterPotionId.potions[65] = "minecraft:long_regeneration";
+            DataConverterPotionId.potions[66] = "minecraft:long_swiftness";
+            DataConverterPotionId.potions[67] = "minecraft:long_fire_resistance";
+            DataConverterPotionId.potions[68] = "minecraft:long_poison";
+            DataConverterPotionId.potions[69] = "minecraft:healing";
+            DataConverterPotionId.potions[70] = "minecraft:long_night_vision";
+            DataConverterPotionId.potions[71] = null;
+            DataConverterPotionId.potions[72] = "minecraft:long_weakness";
+            DataConverterPotionId.potions[73] = "minecraft:long_strength";
+            DataConverterPotionId.potions[74] = "minecraft:long_slowness";
+            DataConverterPotionId.potions[75] = "minecraft:long_leaping";
+            DataConverterPotionId.potions[76] = "minecraft:harming";
+            DataConverterPotionId.potions[77] = "minecraft:long_water_breathing";
+            DataConverterPotionId.potions[78] = "minecraft:long_invisibility";
+            DataConverterPotionId.potions[79] = null;
+            DataConverterPotionId.potions[80] = "minecraft:awkward";
+            DataConverterPotionId.potions[81] = "minecraft:long_regeneration";
+            DataConverterPotionId.potions[82] = "minecraft:long_swiftness";
+            DataConverterPotionId.potions[83] = "minecraft:long_fire_resistance";
+            DataConverterPotionId.potions[84] = "minecraft:long_poison";
+            DataConverterPotionId.potions[85] = "minecraft:healing";
+            DataConverterPotionId.potions[86] = "minecraft:long_night_vision";
+            DataConverterPotionId.potions[87] = null;
+            DataConverterPotionId.potions[88] = "minecraft:long_weakness";
+            DataConverterPotionId.potions[89] = "minecraft:long_strength";
+            DataConverterPotionId.potions[90] = "minecraft:long_slowness";
+            DataConverterPotionId.potions[91] = "minecraft:long_leaping";
+            DataConverterPotionId.potions[92] = "minecraft:harming";
+            DataConverterPotionId.potions[93] = "minecraft:long_water_breathing";
+            DataConverterPotionId.potions[94] = "minecraft:long_invisibility";
+            DataConverterPotionId.potions[95] = null;
+            DataConverterPotionId.potions[96] = "minecraft:thick";
+            DataConverterPotionId.potions[97] = "minecraft:regeneration";
+            DataConverterPotionId.potions[98] = "minecraft:swiftness";
+            DataConverterPotionId.potions[99] = "minecraft:long_fire_resistance";
+            DataConverterPotionId.potions[100] = "minecraft:poison";
+            DataConverterPotionId.potions[101] = "minecraft:strong_healing";
+            DataConverterPotionId.potions[102] = "minecraft:long_night_vision";
+            DataConverterPotionId.potions[103] = null;
+            DataConverterPotionId.potions[104] = "minecraft:long_weakness";
+            DataConverterPotionId.potions[105] = "minecraft:strength";
+            DataConverterPotionId.potions[106] = "minecraft:long_slowness";
+            DataConverterPotionId.potions[107] = "minecraft:leaping";
+            DataConverterPotionId.potions[108] = "minecraft:strong_harming";
+            DataConverterPotionId.potions[109] = "minecraft:long_water_breathing";
+            DataConverterPotionId.potions[110] = "minecraft:long_invisibility";
+            DataConverterPotionId.potions[111] = null;
+            DataConverterPotionId.potions[112] = null;
+            DataConverterPotionId.potions[113] = "minecraft:regeneration";
+            DataConverterPotionId.potions[114] = "minecraft:swiftness";
+            DataConverterPotionId.potions[115] = "minecraft:long_fire_resistance";
+            DataConverterPotionId.potions[116] = "minecraft:poison";
+            DataConverterPotionId.potions[117] = "minecraft:strong_healing";
+            DataConverterPotionId.potions[118] = "minecraft:long_night_vision";
+            DataConverterPotionId.potions[119] = null;
+            DataConverterPotionId.potions[120] = "minecraft:long_weakness";
+            DataConverterPotionId.potions[121] = "minecraft:strength";
+            DataConverterPotionId.potions[122] = "minecraft:long_slowness";
+            DataConverterPotionId.potions[123] = "minecraft:leaping";
+            DataConverterPotionId.potions[124] = "minecraft:strong_harming";
+            DataConverterPotionId.potions[125] = "minecraft:long_water_breathing";
+            DataConverterPotionId.potions[126] = "minecraft:long_invisibility";
+            DataConverterPotionId.potions[127] = null;
+        }
+    }
+
+    private static class DataConverterSpawnEgg implements DataConverter {
+
+        private static final String[] eggs = new String[256];
+
+        DataConverterSpawnEgg() {}
+
+        public int getDataVersion() {
+            return 105;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:spawn_egg".equals(cmp.getString("id"))) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+                CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("EntityTag");
+                short short0 = cmp.getShort("Damage");
+
+                if (!nbttagcompound2.contains("id", 8)) {
+                    String s = DataConverterSpawnEgg.eggs[short0 & 255];
+
+                    if (s != null) {
+                        nbttagcompound2.putString("id", s);
+                        nbttagcompound1.put("EntityTag", nbttagcompound2);
+                        cmp.put("tag", nbttagcompound1);
+                    }
+                }
+
+                if (short0 != 0) {
+                    cmp.putShort("Damage", (short) 0);
+                }
+            }
+
+            return cmp;
+        }
+
+        static {
+
+            DataConverterSpawnEgg.eggs[1] = "Item";
+            DataConverterSpawnEgg.eggs[2] = "XPOrb";
+            DataConverterSpawnEgg.eggs[7] = "ThrownEgg";
+            DataConverterSpawnEgg.eggs[8] = "LeashKnot";
+            DataConverterSpawnEgg.eggs[9] = "Painting";
+            DataConverterSpawnEgg.eggs[10] = "Arrow";
+            DataConverterSpawnEgg.eggs[11] = "Snowball";
+            DataConverterSpawnEgg.eggs[12] = "Fireball";
+            DataConverterSpawnEgg.eggs[13] = "SmallFireball";
+            DataConverterSpawnEgg.eggs[14] = "ThrownEnderpearl";
+            DataConverterSpawnEgg.eggs[15] = "EyeOfEnderSignal";
+            DataConverterSpawnEgg.eggs[16] = "ThrownPotion";
+            DataConverterSpawnEgg.eggs[17] = "ThrownExpBottle";
+            DataConverterSpawnEgg.eggs[18] = "ItemFrame";
+            DataConverterSpawnEgg.eggs[19] = "WitherSkull";
+            DataConverterSpawnEgg.eggs[20] = "PrimedTnt";
+            DataConverterSpawnEgg.eggs[21] = "FallingSand";
+            DataConverterSpawnEgg.eggs[22] = "FireworksRocketEntity";
+            DataConverterSpawnEgg.eggs[23] = "TippedArrow";
+            DataConverterSpawnEgg.eggs[24] = "SpectralArrow";
+            DataConverterSpawnEgg.eggs[25] = "ShulkerBullet";
+            DataConverterSpawnEgg.eggs[26] = "DragonFireball";
+            DataConverterSpawnEgg.eggs[30] = "ArmorStand";
+            DataConverterSpawnEgg.eggs[41] = "Boat";
+            DataConverterSpawnEgg.eggs[42] = "MinecartRideable";
+            DataConverterSpawnEgg.eggs[43] = "MinecartChest";
+            DataConverterSpawnEgg.eggs[44] = "MinecartFurnace";
+            DataConverterSpawnEgg.eggs[45] = "MinecartTNT";
+            DataConverterSpawnEgg.eggs[46] = "MinecartHopper";
+            DataConverterSpawnEgg.eggs[47] = "MinecartSpawner";
+            DataConverterSpawnEgg.eggs[40] = "MinecartCommandBlock";
+            DataConverterSpawnEgg.eggs[48] = "Mob";
+            DataConverterSpawnEgg.eggs[49] = "Monster";
+            DataConverterSpawnEgg.eggs[50] = "Creeper";
+            DataConverterSpawnEgg.eggs[51] = "Skeleton";
+            DataConverterSpawnEgg.eggs[52] = "Spider";
+            DataConverterSpawnEgg.eggs[53] = "Giant";
+            DataConverterSpawnEgg.eggs[54] = "Zombie";
+            DataConverterSpawnEgg.eggs[55] = "Slime";
+            DataConverterSpawnEgg.eggs[56] = "Ghast";
+            DataConverterSpawnEgg.eggs[57] = "PigZombie";
+            DataConverterSpawnEgg.eggs[58] = "Enderman";
+            DataConverterSpawnEgg.eggs[59] = "CaveSpider";
+            DataConverterSpawnEgg.eggs[60] = "Silverfish";
+            DataConverterSpawnEgg.eggs[61] = "Blaze";
+            DataConverterSpawnEgg.eggs[62] = "LavaSlime";
+            DataConverterSpawnEgg.eggs[63] = "EnderDragon";
+            DataConverterSpawnEgg.eggs[64] = "WitherBoss";
+            DataConverterSpawnEgg.eggs[65] = "Bat";
+            DataConverterSpawnEgg.eggs[66] = "Witch";
+            DataConverterSpawnEgg.eggs[67] = "Endermite";
+            DataConverterSpawnEgg.eggs[68] = "Guardian";
+            DataConverterSpawnEgg.eggs[69] = "Shulker";
+            DataConverterSpawnEgg.eggs[90] = "Pig";
+            DataConverterSpawnEgg.eggs[91] = "Sheep";
+            DataConverterSpawnEgg.eggs[92] = "Cow";
+            DataConverterSpawnEgg.eggs[93] = "Chicken";
+            DataConverterSpawnEgg.eggs[94] = "Squid";
+            DataConverterSpawnEgg.eggs[95] = "Wolf";
+            DataConverterSpawnEgg.eggs[96] = "MushroomCow";
+            DataConverterSpawnEgg.eggs[97] = "SnowMan";
+            DataConverterSpawnEgg.eggs[98] = "Ozelot";
+            DataConverterSpawnEgg.eggs[99] = "VillagerGolem";
+            DataConverterSpawnEgg.eggs[100] = "EntityHorse";
+            DataConverterSpawnEgg.eggs[101] = "Rabbit";
+            DataConverterSpawnEgg.eggs[120] = "Villager";
+            DataConverterSpawnEgg.eggs[200] = "EnderCrystal";
+        }
+    }
+
+    private static class DataConverterMinecart implements DataConverter {
+
+        private static final List<String> a = Lists.newArrayList("MinecartRideable", "MinecartChest", "MinecartFurnace", "MinecartTNT", "MinecartSpawner",
+                "MinecartHopper", "MinecartCommandBlock");
+
+        DataConverterMinecart() {}
+
+        public int getDataVersion() {
+            return 106;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("Minecart".equals(cmp.getString("id"))) {
+                String s = "MinecartRideable";
+                int i = cmp.getInt("Type");
+
+                if (i > 0 && i < DataConverterMinecart.a.size()) {
+                    s = DataConverterMinecart.a.get(i);
+                }
+
+                cmp.putString("id", s);
+                cmp.remove("Type");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterMobSpawner implements DataConverter {
+
+        DataConverterMobSpawner() {}
+
+        public int getDataVersion() {
+            return 107;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("MobSpawner".equals(cmp.getString("id"))) {
+                if (cmp.contains("EntityId", 8)) {
+                    String s = cmp.getString("EntityId");
+                    CompoundTag nbttagcompound1 = cmp.getCompound("SpawnData");
+
+                    nbttagcompound1.putString("id", s.isEmpty() ? "Pig" : s);
+                    cmp.put("SpawnData", nbttagcompound1);
+                    cmp.remove("EntityId");
+                }
+
+                if (cmp.contains("SpawnPotentials", 9)) {
+                    ListTag nbttaglist = cmp.getList("SpawnPotentials", 10);
+
+                    for (int i = 0; i < nbttaglist.size(); ++i) {
+                        CompoundTag nbttagcompound2 = nbttaglist.getCompound(i);
+
+                        if (nbttagcompound2.contains("Type", 8)) {
+                            CompoundTag nbttagcompound3 = nbttagcompound2.getCompound("Properties");
+
+                            nbttagcompound3.putString("id", nbttagcompound2.getString("Type"));
+                            nbttagcompound2.put("Entity", nbttagcompound3);
+                            nbttagcompound2.remove("Type");
+                            nbttagcompound2.remove("Properties");
+                        }
+                    }
+                }
+
+            }
+            return cmp;
+        }
+    }
+
+    private static class DataConverterUUID implements DataConverter {
+
+        DataConverterUUID() {}
+
+        public int getDataVersion() {
+            return 108;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if (cmp.contains("UUID", 8)) {
+                cmp.putUUID("UUID", UUID.fromString(cmp.getString("UUID")));
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterHealth implements DataConverter {
+
+        private static final Set<String> a = Sets.newHashSet("ArmorStand", "Bat", "Blaze", "CaveSpider", "Chicken", "Cow", "Creeper", "EnderDragon", "Enderman",
+                "Endermite", "EntityHorse", "Ghast", "Giant", "Guardian", "LavaSlime", "MushroomCow", "Ozelot", "Pig", "PigZombie", "Rabbit", "Sheep", "Shulker",
+                "Silverfish", "Skeleton", "Slime", "SnowMan", "Spider", "Squid", "Villager", "VillagerGolem", "Witch", "WitherBoss", "Wolf", "Zombie");
+
+        DataConverterHealth() {}
+
+        public int getDataVersion() {
+            return 109;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if (DataConverterHealth.a.contains(cmp.getString("id"))) {
+                float f;
+
+                if (cmp.contains("HealF", 99)) {
+                    f = cmp.getFloat("HealF");
+                    cmp.remove("HealF");
+                } else {
+                    if (!cmp.contains("Health", 99)) {
+                        return cmp;
+                    }
+
+                    f = cmp.getFloat("Health");
+                }
+
+                cmp.putFloat("Health", f);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterSaddle implements DataConverter {
+
+        DataConverterSaddle() {}
+
+        public int getDataVersion() {
+            return 110;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("EntityHorse".equals(cmp.getString("id")) && !cmp.contains("SaddleItem", 10) && cmp.getBoolean("Saddle")) {
+                CompoundTag nbttagcompound1 = new CompoundTag();
+
+                nbttagcompound1.putString("id", "minecraft:saddle");
+                nbttagcompound1.putByte("Count", (byte) 1);
+                nbttagcompound1.putShort("Damage", (short) 0);
+                cmp.put("SaddleItem", nbttagcompound1);
+                cmp.remove("Saddle");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterHanging implements DataConverter {
+
+        DataConverterHanging() {}
+
+        public int getDataVersion() {
+            return 111;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            String s = cmp.getString("id");
+            boolean flag = "Painting".equals(s);
+            boolean flag1 = "ItemFrame".equals(s);
+
+            if ((flag || flag1) && !cmp.contains("Facing", 99)) {
+                Direction enumdirection;
+
+                if (cmp.contains("Direction", 99)) {
+                    enumdirection = Direction.from2DDataValue(cmp.getByte("Direction"));
+                    cmp.putInt("TileX", cmp.getInt("TileX") + enumdirection.getStepX());
+                    cmp.putInt("TileY", cmp.getInt("TileY") + enumdirection.getStepY());
+                    cmp.putInt("TileZ", cmp.getInt("TileZ") + enumdirection.getStepZ());
+                    cmp.remove("Direction");
+                    if (flag1 && cmp.contains("ItemRotation", 99)) {
+                        cmp.putByte("ItemRotation", (byte) (cmp.getByte("ItemRotation") * 2));
+                    }
+                } else {
+                    enumdirection = Direction.from2DDataValue(cmp.getByte("Dir"));
+                    cmp.remove("Dir");
+                }
+
+                cmp.putByte("Facing", (byte) enumdirection.get2DDataValue());
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterDropChances implements DataConverter {
+
+        DataConverterDropChances() {}
+
+        public int getDataVersion() {
+            return 113;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            ListTag nbttaglist;
+
+            if (cmp.contains("HandDropChances", 9)) {
+                nbttaglist = cmp.getList("HandDropChances", 5);
+                if (nbttaglist.size() == 2 && nbttaglist.getShort(0) == 0.0F && nbttaglist.getShort(1) == 0.0F) {
+                    cmp.remove("HandDropChances");
+                }
+            }
+
+            if (cmp.contains("ArmorDropChances", 9)) {
+                nbttaglist = cmp.getList("ArmorDropChances", 5);
+                if (nbttaglist.size() == 4 && nbttaglist.getShort(0) == 0.0F && nbttaglist.getShort(1) == 0.0F && nbttaglist.getShort(2) == 0.0F && nbttaglist.getShort(3) == 0.0F) {
+                    cmp.remove("ArmorDropChances");
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterRiding implements DataConverter {
+
+        DataConverterRiding() {}
+
+        public int getDataVersion() {
+            return 135;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            while (cmp.contains("Riding", 10)) {
+                CompoundTag nbttagcompound1 = this.b(cmp);
+
+                this.convert(cmp, nbttagcompound1);
+                cmp = nbttagcompound1;
+            }
+
+            return cmp;
+        }
+
+        protected void convert(CompoundTag nbttagcompound, CompoundTag nbttagcompound1) {
+            ListTag nbttaglist = new ListTag();
+
+            nbttaglist.add(nbttagcompound);
+            nbttagcompound1.put("Passengers", nbttaglist);
+        }
+
+        protected CompoundTag b(CompoundTag nbttagcompound) {
+            CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Riding");
+
+            nbttagcompound.remove("Riding");
+            return nbttagcompound1;
+        }
+    }
+
+    private static class DataConverterBook implements DataConverter {
+
+        DataConverterBook() {}
+
+        public int getDataVersion() {
+            return 165;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:written_book".equals(cmp.getString("id"))) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+                if (nbttagcompound1.contains("pages", 9)) {
+                    ListTag nbttaglist = nbttagcompound1.getList("pages", 8);
+
+                    for (int i = 0; i < nbttaglist.size(); ++i) {
+                        String s = nbttaglist.getString(i);
+                        Component object = null;
+
+                        if (!"null".equals(s) && !StringUtil.isNullOrEmpty(s)) {
+                            if ((s.charAt(0) != 34 || s.charAt(s.length() - 1) != 34) && (s.charAt(0) != 123 || s.charAt(s.length() - 1) != 125)) {
+                                object = new TextComponent(s);
+                            } else {
+                                try {
+                                    object = GsonHelper.fromJson(DataConverterSignText.a, s, Component.class, true);
+                                    if (object == null) {
+                                        object = new TextComponent("");
+                                    }
+                                } catch (JsonParseException ignored) {
+                                }
+
+                                if (object == null) {
+                                    try {
+                                        object = Component.Serializer.fromJson(s);
+                                    } catch (JsonParseException ignored) {
+                                    }
+                                }
+
+                                if (object == null) {
+                                    try {
+                                        object = Component.Serializer.fromJsonLenient(s);
+                                    } catch (JsonParseException ignored) {
+                                    }
+                                }
+
+                                if (object == null) {
+                                    object = new TextComponent(s);
+                                }
+                            }
+                        } else {
+                            object = new TextComponent("");
+                        }
+
+                        nbttaglist.set(i, StringTag.valueOf(Component.Serializer.toJson(object)));
+                    }
+
+                    nbttagcompound1.put("pages", nbttaglist);
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterCookedFish implements DataConverter {
+
+        private static final ResourceLocation a = new ResourceLocation("cooked_fished");
+
+        DataConverterCookedFish() {}
+
+        public int getDataVersion() {
+            return 502;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if (cmp.contains("id", 8) && DataConverterCookedFish.a.equals(new ResourceLocation(cmp.getString("id")))) {
+                cmp.putString("id", "minecraft:cooked_fish");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterZombie implements DataConverter {
+
+        private static final Random a = new Random();
+
+        DataConverterZombie() {}
+
+        public int getDataVersion() {
+            return 502;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("Zombie".equals(cmp.getString("id")) && cmp.getBoolean("IsVillager")) {
+                if (!cmp.contains("ZombieType", 99)) {
+                    int i = -1;
+
+                    if (cmp.contains("VillagerProfession", 99)) {
+                        try {
+                            i = this.convert(cmp.getInt("VillagerProfession"));
+                        } catch (RuntimeException ignored) {
+                        }
+                    }
+
+                    if (i == -1) {
+                        i = this.convert(DataConverterZombie.a.nextInt(6));
+                    }
+
+                    cmp.putInt("ZombieType", i);
+                }
+
+                cmp.remove("IsVillager");
+            }
+
+            return cmp;
+        }
+
+        private int convert(int i) {
+            return i >= 0 && i < 6 ? i : -1;
+        }
+    }
+
+    private static class DataConverterVBO implements DataConverter {
+
+        DataConverterVBO() {}
+
+        public int getDataVersion() {
+            return 505;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            cmp.putString("useVbo", "true");
+            return cmp;
+        }
+    }
+
+    private static class DataConverterGuardian implements DataConverter {
+
+        DataConverterGuardian() {}
+
+        public int getDataVersion() {
+            return 700;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("Guardian".equals(cmp.getString("id"))) {
+                if (cmp.getBoolean("Elder")) {
+                    cmp.putString("id", "ElderGuardian");
+                }
+
+                cmp.remove("Elder");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterSkeleton implements DataConverter {
+
+        DataConverterSkeleton() {}
+
+        public int getDataVersion() {
+            return 701;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            String s = cmp.getString("id");
+
+            if ("Skeleton".equals(s)) {
+                int i = cmp.getInt("SkeletonType");
+
+                if (i == 1) {
+                    cmp.putString("id", "WitherSkeleton");
+                } else if (i == 2) {
+                    cmp.putString("id", "Stray");
+                }
+
+                cmp.remove("SkeletonType");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterZombieType implements DataConverter {
+
+        DataConverterZombieType() {}
+
+        public int getDataVersion() {
+            return 702;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("Zombie".equals(cmp.getString("id"))) {
+                int i = cmp.getInt("ZombieType");
+
+                switch (i) {
+                    case 0:
+                    default:
+                        break;
+
+                    case 1:
+                    case 2:
+                    case 3:
+                    case 4:
+                    case 5:
+                        cmp.putString("id", "ZombieVillager");
+                        cmp.putInt("Profession", i - 1);
+                        break;
+
+                    case 6:
+                        cmp.putString("id", "Husk");
+                }
+
+                cmp.remove("ZombieType");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterHorse implements DataConverter {
+
+        DataConverterHorse() {}
+
+        public int getDataVersion() {
+            return 703;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("EntityHorse".equals(cmp.getString("id"))) {
+                int i = cmp.getInt("Type");
+
+                switch (i) {
+                    case 0:
+                    default:
+                        cmp.putString("id", "Horse");
+                        break;
+
+                    case 1:
+                        cmp.putString("id", "Donkey");
+                        break;
+
+                    case 2:
+                        cmp.putString("id", "Mule");
+                        break;
+
+                    case 3:
+                        cmp.putString("id", "ZombieHorse");
+                        break;
+
+                    case 4:
+                        cmp.putString("id", "SkeletonHorse");
+                }
+
+                cmp.remove("Type");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterTileEntity implements DataConverter {
+
+        private static final Map<String, String> a = Maps.newHashMap();
+
+        DataConverterTileEntity() {}
+
+        public int getDataVersion() {
+            return 704;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            String s = DataConverterTileEntity.a.get(cmp.getString("id"));
+
+            if (s != null) {
+                cmp.putString("id", s);
+            }
+
+            return cmp;
+        }
+
+        static {
+            DataConverterTileEntity.a.put("Airportal", "minecraft:end_portal");
+            DataConverterTileEntity.a.put("Banner", "minecraft:banner");
+            DataConverterTileEntity.a.put("Beacon", "minecraft:beacon");
+            DataConverterTileEntity.a.put("Cauldron", "minecraft:brewing_stand");
+            DataConverterTileEntity.a.put("Chest", "minecraft:chest");
+            DataConverterTileEntity.a.put("Comparator", "minecraft:comparator");
+            DataConverterTileEntity.a.put("Control", "minecraft:command_block");
+            DataConverterTileEntity.a.put("CommandBlock", "minecraft:command_block"); // EMC
+            DataConverterTileEntity.a.put("Shield", "minecraft:shield"); // EMC
+            DataConverterTileEntity.a.put("DLDetector", "minecraft:daylight_detector");
+            DataConverterTileEntity.a.put("Dropper", "minecraft:dropper");
+            DataConverterTileEntity.a.put("EnchantTable", "minecraft:enchanting_table");
+            DataConverterTileEntity.a.put("EndGateway", "minecraft:end_gateway");
+            DataConverterTileEntity.a.put("EnderChest", "minecraft:ender_chest");
+            DataConverterTileEntity.a.put("FlowerPot", "minecraft:flower_pot");
+            DataConverterTileEntity.a.put("Furnace", "minecraft:furnace");
+            DataConverterTileEntity.a.put("Hopper", "minecraft:hopper");
+            DataConverterTileEntity.a.put("MobSpawner", "minecraft:mob_spawner");
+            DataConverterTileEntity.a.put("Music", "minecraft:noteblock");
+            DataConverterTileEntity.a.put("Piston", "minecraft:piston");
+            DataConverterTileEntity.a.put("RecordPlayer", "minecraft:jukebox");
+            DataConverterTileEntity.a.put("Sign", "minecraft:sign");
+            DataConverterTileEntity.a.put("Skull", "minecraft:skull");
+            DataConverterTileEntity.a.put("Structure", "minecraft:structure_block");
+            DataConverterTileEntity.a.put("Trap", "minecraft:dispenser");
+        }
+    }
+
+    private static class DataConverterEntity implements DataConverter {
+
+        private static final Map<String, String> a = Maps.newHashMap();
+
+        DataConverterEntity() {}
+
+        public int getDataVersion() {
+            return 704;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            String s = DataConverterEntity.a.get(cmp.getString("id"));
+
+            if (s != null) {
+                cmp.putString("id", s);
+            }
+
+            return cmp;
+        }
+
+        static {
+            DataConverterEntity.a.put("AreaEffectCloud", "minecraft:area_effect_cloud");
+            DataConverterEntity.a.put("ArmorStand", "minecraft:armor_stand");
+            DataConverterEntity.a.put("Arrow", "minecraft:arrow");
+            DataConverterEntity.a.put("Bat", "minecraft:bat");
+            DataConverterEntity.a.put("Blaze", "minecraft:blaze");
+            DataConverterEntity.a.put("Boat", "minecraft:boat");
+            DataConverterEntity.a.put("CaveSpider", "minecraft:cave_spider");
+            DataConverterEntity.a.put("Chicken", "minecraft:chicken");
+            DataConverterEntity.a.put("Cow", "minecraft:cow");
+            DataConverterEntity.a.put("Creeper", "minecraft:creeper");
+            DataConverterEntity.a.put("Donkey", "minecraft:donkey");
+            DataConverterEntity.a.put("DragonFireball", "minecraft:dragon_fireball");
+            DataConverterEntity.a.put("ElderGuardian", "minecraft:elder_guardian");
+            DataConverterEntity.a.put("EnderCrystal", "minecraft:ender_crystal");
+            DataConverterEntity.a.put("EnderDragon", "minecraft:ender_dragon");
+            DataConverterEntity.a.put("Enderman", "minecraft:enderman");
+            DataConverterEntity.a.put("Endermite", "minecraft:endermite");
+            DataConverterEntity.a.put("EyeOfEnderSignal", "minecraft:eye_of_ender_signal");
+            DataConverterEntity.a.put("FallingSand", "minecraft:falling_block");
+            DataConverterEntity.a.put("Fireball", "minecraft:fireball");
+            DataConverterEntity.a.put("FireworksRocketEntity", "minecraft:fireworks_rocket");
+            DataConverterEntity.a.put("Ghast", "minecraft:ghast");
+            DataConverterEntity.a.put("Giant", "minecraft:giant");
+            DataConverterEntity.a.put("Guardian", "minecraft:guardian");
+            DataConverterEntity.a.put("Horse", "minecraft:horse");
+            DataConverterEntity.a.put("Husk", "minecraft:husk");
+            DataConverterEntity.a.put("Item", "minecraft:item");
+            DataConverterEntity.a.put("ItemFrame", "minecraft:item_frame");
+            DataConverterEntity.a.put("LavaSlime", "minecraft:magma_cube");
+            DataConverterEntity.a.put("LeashKnot", "minecraft:leash_knot");
+            DataConverterEntity.a.put("MinecartChest", "minecraft:chest_minecart");
+            DataConverterEntity.a.put("MinecartCommandBlock", "minecraft:commandblock_minecart");
+            DataConverterEntity.a.put("MinecartFurnace", "minecraft:furnace_minecart");
+            DataConverterEntity.a.put("MinecartHopper", "minecraft:hopper_minecart");
+            DataConverterEntity.a.put("MinecartRideable", "minecraft:minecart");
+            DataConverterEntity.a.put("MinecartSpawner", "minecraft:spawner_minecart");
+            DataConverterEntity.a.put("MinecartTNT", "minecraft:tnt_minecart");
+            DataConverterEntity.a.put("Mule", "minecraft:mule");
+            DataConverterEntity.a.put("MushroomCow", "minecraft:mooshroom");
+            DataConverterEntity.a.put("Ozelot", "minecraft:ocelot");
+            DataConverterEntity.a.put("Painting", "minecraft:painting");
+            DataConverterEntity.a.put("Pig", "minecraft:pig");
+            DataConverterEntity.a.put("PigZombie", "minecraft:zombie_pigman");
+            DataConverterEntity.a.put("PolarBear", "minecraft:polar_bear");
+            DataConverterEntity.a.put("PrimedTnt", "minecraft:tnt");
+            DataConverterEntity.a.put("Rabbit", "minecraft:rabbit");
+            DataConverterEntity.a.put("Sheep", "minecraft:sheep");
+            DataConverterEntity.a.put("Shulker", "minecraft:shulker");
+            DataConverterEntity.a.put("ShulkerBullet", "minecraft:shulker_bullet");
+            DataConverterEntity.a.put("Silverfish", "minecraft:silverfish");
+            DataConverterEntity.a.put("Skeleton", "minecraft:skeleton");
+            DataConverterEntity.a.put("SkeletonHorse", "minecraft:skeleton_horse");
+            DataConverterEntity.a.put("Slime", "minecraft:slime");
+            DataConverterEntity.a.put("SmallFireball", "minecraft:small_fireball");
+            DataConverterEntity.a.put("SnowMan", "minecraft:snowman");
+            DataConverterEntity.a.put("Snowball", "minecraft:snowball");
+            DataConverterEntity.a.put("SpectralArrow", "minecraft:spectral_arrow");
+            DataConverterEntity.a.put("Spider", "minecraft:spider");
+            DataConverterEntity.a.put("Squid", "minecraft:squid");
+            DataConverterEntity.a.put("Stray", "minecraft:stray");
+            DataConverterEntity.a.put("ThrownEgg", "minecraft:egg");
+            DataConverterEntity.a.put("ThrownEnderpearl", "minecraft:ender_pearl");
+            DataConverterEntity.a.put("ThrownExpBottle", "minecraft:xp_bottle");
+            DataConverterEntity.a.put("ThrownPotion", "minecraft:potion");
+            DataConverterEntity.a.put("Villager", "minecraft:villager");
+            DataConverterEntity.a.put("VillagerGolem", "minecraft:villager_golem");
+            DataConverterEntity.a.put("Witch", "minecraft:witch");
+            DataConverterEntity.a.put("WitherBoss", "minecraft:wither");
+            DataConverterEntity.a.put("WitherSkeleton", "minecraft:wither_skeleton");
+            DataConverterEntity.a.put("WitherSkull", "minecraft:wither_skull");
+            DataConverterEntity.a.put("Wolf", "minecraft:wolf");
+            DataConverterEntity.a.put("XPOrb", "minecraft:xp_orb");
+            DataConverterEntity.a.put("Zombie", "minecraft:zombie");
+            DataConverterEntity.a.put("ZombieHorse", "minecraft:zombie_horse");
+            DataConverterEntity.a.put("ZombieVillager", "minecraft:zombie_villager");
+        }
+    }
+
+    private static class DataConverterPotionWater implements DataConverter {
+
+        DataConverterPotionWater() {}
+
+        public int getDataVersion() {
+            return 806;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            String s = cmp.getString("id");
+
+            if ("minecraft:potion".equals(s) || "minecraft:splash_potion".equals(s) || "minecraft:lingering_potion".equals(s) || "minecraft:tipped_arrow".equals(s)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+                if (!nbttagcompound1.contains("Potion", 8)) {
+                    nbttagcompound1.putString("Potion", "minecraft:water");
+                }
+
+                if (!cmp.contains("tag", 10)) {
+                    cmp.put("tag", nbttagcompound1);
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterShulker implements DataConverter {
+
+        DataConverterShulker() {}
+
+        public int getDataVersion() {
+            return 808;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:shulker".equals(cmp.getString("id")) && !cmp.contains("Color", 99)) {
+                cmp.putByte("Color", (byte) 10);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterShulkerBoxItem implements DataConverter {
+
+        public static final String[] a =
+                { "minecraft:white_shulker_box", "minecraft:orange_shulker_box", "minecraft:magenta_shulker_box", "minecraft:light_blue_shulker_box", "minecraft:yellow_shulker_box", "minecraft:lime_shulker_box", "minecraft:pink_shulker_box", "minecraft:gray_shulker_box", "minecraft:silver_shulker_box", "minecraft:cyan_shulker_box", "minecraft:purple_shulker_box", "minecraft:blue_shulker_box", "minecraft:brown_shulker_box", "minecraft:green_shulker_box", "minecraft:red_shulker_box", "minecraft:black_shulker_box"};
+
+        DataConverterShulkerBoxItem() {}
+
+        public int getDataVersion() {
+            return 813;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:shulker_box".equals(cmp.getString("id")) && cmp.contains("tag", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("tag");
+
+                if (nbttagcompound1.contains("BlockEntityTag", 10)) {
+                    CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("BlockEntityTag");
+
+                    if (nbttagcompound2.getList("Items", 10).isEmpty()) {
+                        nbttagcompound2.remove("Items");
+                    }
+
+                    int i = nbttagcompound2.getInt("Color");
+
+                    nbttagcompound2.remove("Color");
+                    if (nbttagcompound2.isEmpty()) {
+                        nbttagcompound1.remove("BlockEntityTag");
+                    }
+
+                    if (nbttagcompound1.isEmpty()) {
+                        cmp.remove("tag");
+                    }
+
+                    cmp.putString("id", DataConverterShulkerBoxItem.a[i % 16]);
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterShulkerBoxBlock implements DataConverter {
+
+        DataConverterShulkerBoxBlock() {}
+
+        public int getDataVersion() {
+            return 813;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:shulker".equals(cmp.getString("id"))) {
+                cmp.remove("Color");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterLang implements DataConverter {
+
+        DataConverterLang() {}
+
+        public int getDataVersion() {
+            return 816;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if (cmp.contains("lang", 8)) {
+                cmp.putString("lang", cmp.getString("lang").toLowerCase(Locale.ROOT));
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterTotem implements DataConverter {
+
+        DataConverterTotem() {}
+
+        public int getDataVersion() {
+            return 820;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:totem".equals(cmp.getString("id"))) {
+                cmp.putString("id", "minecraft:totem_of_undying");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterBedBlock implements DataConverter {
+
+        private static final Logger a = LogManager.getLogger();
+
+        DataConverterBedBlock() {}
+
+        public int getDataVersion() {
+            return 1125;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            try {
+                CompoundTag nbttagcompound1 = cmp.getCompound("Level");
+                int i = nbttagcompound1.getInt("xPos");
+                int j = nbttagcompound1.getInt("zPos");
+                ListTag nbttaglist = nbttagcompound1.getList("TileEntities", 10);
+                ListTag nbttaglist1 = nbttagcompound1.getList("Sections", 10);
+
+                for (int k = 0; k < nbttaglist1.size(); ++k) {
+                    CompoundTag nbttagcompound2 = nbttaglist1.getCompound(k);
+                    byte b0 = nbttagcompound2.getByte("Y");
+                    byte[] abyte = nbttagcompound2.getByteArray("Blocks");
+
+                    for (int l = 0; l < abyte.length; ++l) {
+                        if (416 == (abyte[l] & 255) << 4) {
+                            int i1 = l & 15;
+                            int j1 = l >> 8 & 15;
+                            int k1 = l >> 4 & 15;
+                            CompoundTag nbttagcompound3 = new CompoundTag();
+
+                            nbttagcompound3.putString("id", "bed");
+                            nbttagcompound3.putInt("x", i1 + (i << 4));
+                            nbttagcompound3.putInt("y", j1 + (b0 << 4));
+                            nbttagcompound3.putInt("z", k1 + (j << 4));
+                            nbttaglist.add(nbttagcompound3);
+                        }
+                    }
+                }
+            } catch (Exception exception) {
+                DataConverterBedBlock.a.warn("Unable to datafix Bed blocks, level format may be missing tags.");
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterBedItem implements DataConverter {
+
+        DataConverterBedItem() {}
+
+        public int getDataVersion() {
+            return 1125;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("minecraft:bed".equals(cmp.getString("id")) && cmp.getShort("Damage") == 0) {
+                cmp.putShort("Damage", (short) DyeColor.RED.getId());
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataConverterSignText implements DataConverter {
+
+        public static final Gson a = new GsonBuilder().registerTypeAdapter(Component.class, new JsonDeserializer() {
+            Component a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+                if (jsonelement.isJsonPrimitive()) {
+                    return new TextComponent(jsonelement.getAsString());
+                } else if (jsonelement.isJsonArray()) {
+                    JsonArray jsonarray = jsonelement.getAsJsonArray();
+                    Component ichatbasecomponent = null;
+
+                    for (JsonElement jsonelement1 : jsonarray) {
+                        Component ichatbasecomponent1 = this.a(jsonelement1, jsonelement1.getClass(), jsondeserializationcontext);
+
+                        if (ichatbasecomponent == null) {
+                            ichatbasecomponent = ichatbasecomponent1;
+                        } else {
+                            ichatbasecomponent.getSiblings().add(ichatbasecomponent1);
+                        }
+                    }
+
+                    return ichatbasecomponent;
+                } else {
+                    throw new JsonParseException("Don't know how to turn " + jsonelement + " into a Component");
+                }
+            }
+
+            public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+                return this.a(jsonelement, type, jsondeserializationcontext);
+            }
+        }).create();
+
+        DataConverterSignText() {}
+
+        public int getDataVersion() {
+            return 101;
+        }
+
+        public CompoundTag convert(CompoundTag cmp) {
+            if ("Sign".equals(cmp.getString("id"))) {
+                this.convert(cmp, "Text1");
+                this.convert(cmp, "Text2");
+                this.convert(cmp, "Text3");
+                this.convert(cmp, "Text4");
+            }
+
+            return cmp;
+        }
+
+        private void convert(CompoundTag nbttagcompound, String s) {
+            String s1 = nbttagcompound.getString(s);
+            Component object = null;
+
+            if (!"null".equals(s1) && !StringUtil.isNullOrEmpty(s1)) {
+                if ((s1.charAt(0) != 34 || s1.charAt(s1.length() - 1) != 34) && (s1.charAt(0) != 123 || s1.charAt(s1.length() - 1) != 125)) {
+                    object = new TextComponent(s1);
+                } else {
+                    try {
+                        object = GsonHelper.fromJson(DataConverterSignText.a, s1, Component.class, true);
+                        if (object == null) {
+                            object = new TextComponent("");
+                        }
+                    } catch (JsonParseException ignored) {
+                    }
+
+                    if (object == null) {
+                        try {
+                            object = Component.Serializer.fromJson(s1);
+                        } catch (JsonParseException ignored) {
+                        }
+                    }
+
+                    if (object == null) {
+                        try {
+                            object = Component.Serializer.fromJsonLenient(s1);
+                        } catch (JsonParseException ignored) {
+                        }
+                    }
+
+                    if (object == null) {
+                        object = new TextComponent(s1);
+                    }
+                }
+            } else {
+                object = new TextComponent("");
+            }
+
+            nbttagcompound.putString(s, Component.Serializer.toJson(object));
+        }
+    }
+
+    private static class DataInspectorPlayerVehicle implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (cmp.contains("RootVehicle", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("RootVehicle");
+
+                if (nbttagcompound1.contains("Entity", 10)) {
+                    convertCompound(LegacyType.ENTITY, nbttagcompound1, "Entity", sourceVer, targetVer);
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorLevelPlayer implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (cmp.contains("Player", 10)) {
+                convertCompound(LegacyType.PLAYER, cmp, "Player", sourceVer, targetVer);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorStructure implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            ListTag nbttaglist;
+            int j;
+            CompoundTag nbttagcompound1;
+
+            if (cmp.contains("entities", 9)) {
+                nbttaglist = cmp.getList("entities", 10);
+
+                for (j = 0; j < nbttaglist.size(); ++j) {
+                    nbttagcompound1 = (CompoundTag) nbttaglist.get(j);
+                    if (nbttagcompound1.contains("nbt", 10)) {
+                        convertCompound(LegacyType.ENTITY, nbttagcompound1, "nbt", sourceVer, targetVer);
+                    }
+                }
+            }
+
+            if (cmp.contains("blocks", 9)) {
+                nbttaglist = cmp.getList("blocks", 10);
+
+                for (j = 0; j < nbttaglist.size(); ++j) {
+                    nbttagcompound1 = (CompoundTag) nbttaglist.get(j);
+                    if (nbttagcompound1.contains("nbt", 10)) {
+                        convertCompound(LegacyType.BLOCK_ENTITY, nbttagcompound1, "nbt", sourceVer, targetVer);
+                    }
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorChunks implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (cmp.contains("Level", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("Level");
+                ListTag nbttaglist;
+                int j;
+
+                if (nbttagcompound1.contains("Entities", 9)) {
+                    nbttaglist = nbttagcompound1.getList("Entities", 10);
+
+                    for (j = 0; j < nbttaglist.size(); ++j) {
+                        nbttaglist.set(j, convert(LegacyType.ENTITY, (CompoundTag) nbttaglist.get(j), sourceVer, targetVer));
+                    }
+                }
+
+                if (nbttagcompound1.contains("TileEntities", 9)) {
+                    nbttaglist = nbttagcompound1.getList("TileEntities", 10);
+
+                    for (j = 0; j < nbttaglist.size(); ++j) {
+                        nbttaglist.set(j, convert(LegacyType.BLOCK_ENTITY, (CompoundTag) nbttaglist.get(j), sourceVer, targetVer));
+                    }
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorEntityPassengers implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (cmp.contains("Passengers", 9)) {
+                ListTag nbttaglist = cmp.getList("Passengers", 10);
+
+                for (int j = 0; j < nbttaglist.size(); ++j) {
+                    nbttaglist.set(j, convert(LegacyType.ENTITY, nbttaglist.getCompound(j), sourceVer, targetVer));
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorPlayer implements DataInspector {
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            convertItems(cmp, "Inventory", sourceVer, targetVer);
+            convertItems(cmp, "EnderItems", sourceVer, targetVer);
+            if (cmp.contains("ShoulderEntityLeft", 10)) {
+                convertCompound(LegacyType.ENTITY, cmp, "ShoulderEntityLeft", sourceVer, targetVer);
+            }
+
+            if (cmp.contains("ShoulderEntityRight", 10)) {
+                convertCompound(LegacyType.ENTITY, cmp, "ShoulderEntityRight", sourceVer, targetVer);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorVillagers implements DataInspector {
+        ResourceLocation entityVillager = getKey("EntityVillager");
+
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (entityVillager.equals(new ResourceLocation(cmp.getString("id"))) && cmp.contains("Offers", 10)) {
+                CompoundTag nbttagcompound1 = cmp.getCompound("Offers");
+
+                if (nbttagcompound1.contains("Recipes", 9)) {
+                    ListTag nbttaglist = nbttagcompound1.getList("Recipes", 10);
+
+                    for (int j = 0; j < nbttaglist.size(); ++j) {
+                        CompoundTag nbttagcompound2 = nbttaglist.getCompound(j);
+
+                        convertItem(nbttagcompound2, "buy", sourceVer, targetVer);
+                        convertItem(nbttagcompound2, "buyB", sourceVer, targetVer);
+                        convertItem(nbttagcompound2, "sell", sourceVer, targetVer);
+                        nbttaglist.set(j, nbttagcompound2);
+                    }
+                }
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorMobSpawnerMinecart implements DataInspector {
+        ResourceLocation entityMinecartMobSpawner = getKey("EntityMinecartMobSpawner");
+        ResourceLocation tileEntityMobSpawner = getKey("TileEntityMobSpawner");
+
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            String s = cmp.getString("id");
+            if (entityMinecartMobSpawner.equals(new ResourceLocation(s))) {
+                cmp.putString("id", tileEntityMobSpawner.toString());
+                convert(LegacyType.BLOCK_ENTITY, cmp, sourceVer, targetVer);
+                cmp.putString("id", s);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorMobSpawnerMobs implements DataInspector {
+        ResourceLocation tileEntityMobSpawner = getKey("TileEntityMobSpawner");
+
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (tileEntityMobSpawner.equals(new ResourceLocation(cmp.getString("id")))) {
+                if (cmp.contains("SpawnPotentials", 9)) {
+                    ListTag nbttaglist = cmp.getList("SpawnPotentials", 10);
+
+                    for (int j = 0; j < nbttaglist.size(); ++j) {
+                        CompoundTag nbttagcompound1 = nbttaglist.getCompound(j);
+
+                        convertCompound(LegacyType.ENTITY, nbttagcompound1, "Entity", sourceVer, targetVer);
+                    }
+                }
+
+                convertCompound(LegacyType.ENTITY, cmp, "SpawnData", sourceVer, targetVer);
+            }
+
+            return cmp;
+        }
+    }
+
+    private static class DataInspectorCommandBlock implements DataInspector {
+        ResourceLocation tileEntityCommand = getKey("TileEntityCommand");
+
+        @Override
+        public CompoundTag inspect(CompoundTag cmp, int sourceVer, int targetVer) {
+            if (tileEntityCommand.equals(new ResourceLocation(cmp.getString("id")))) {
+                cmp.putString("id", "Control");
+                convert(LegacyType.BLOCK_ENTITY, cmp, sourceVer, targetVer);
+                cmp.putString("id", "MinecartCommandBlock");
+            }
+
+            return cmp;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/empireminecraft/api/HiddenItemMeta.java b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..11985471253dbff8719ea223356e103a6481ce6a
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
@@ -0,0 +1,98 @@
+package com.empireminecraft.api;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.network.chat.Component;
+
+public final class HiddenItemMeta {
+    private HiddenItemMeta() {
+    }
+
+    public static CompoundTag filterItemLore(CompoundTag nbttagcompound, boolean storeOriginal) {
+        if (nbttagcompound != null && nbttagcompound.contains("display")) {
+            CompoundTag display = nbttagcompound.getCompound("display");
+            if (display.contains("Lore")) {
+                ListTag lore = display.getList("Lore", 8);
+                int lastLine = 0;
+                boolean hasSpecial = false;
+                boolean hasShiny = false;
+                for (int i = 0; i < lore.size(); i++) {
+                    String line = lore.getString(i);
+                    if (line.startsWith("{") && line.endsWith("}")) {
+                        Component component = Component.Serializer.fromJson(line);
+                        line = component != null ? component.getString() : line;
+                    }
+
+                    if ("&&::HIDE".equals(line)) {
+                        hasSpecial = true;
+                        break;
+                    } else if (!line.isEmpty()) {
+                        if ("&&::GLOW".equals(line)) {
+                            hasShiny = true;
+                            hasSpecial = true;
+                            break;
+                        } else {
+                            lastLine = i+1;
+                        }
+                    }
+                }
+                if (hasSpecial) {
+                    ListTag newlore = new ListTag();
+                    for (int x = 0; x < lastLine; x++) {
+                        newlore.add(StringTag.valueOf(lore.getString(x)));
+                    }
+
+                    nbttagcompound = nbttagcompound.copy();
+                    if (hasShiny && !nbttagcompound.contains("Enchantments")) {
+                        ListTag nbtbase = new ListTag();
+                        CompoundTag enchant = new CompoundTag();
+                        enchant.putShort("id", (short) 1);
+                        enchant.putShort("lvl", (short) 1);
+                        nbtbase.add(enchant);
+                        nbttagcompound.put("Enchantments" , nbtbase);
+                        int flags = 1;
+                        if (nbttagcompound.contains("HideFlags")) {
+                            flags = nbttagcompound.getInt("HideFlags");
+                            nbttagcompound.putInt("HideFlagsOrig", flags);
+                            flags &= 1;
+                        } else {
+                            nbttagcompound.remove("HideFlagsOrig");
+                        }
+                        nbttagcompound.putInt("HideFlags", flags);
+                        nbttagcompound.putInt("fakeench", 1);
+                    }
+                    display = nbttagcompound.getCompound("display");
+                    display.put("Lore", newlore);
+                    if (storeOriginal) {
+                        display.put("OriginalLore", lore);
+                    }
+                }
+            }
+        }
+        return nbttagcompound;
+    }
+
+    public static CompoundTag restoreItemLore(CompoundTag tag) {
+        if (tag.contains("display")) {
+            CompoundTag display = tag.getCompound("display");
+            if (display.contains("OriginalLore")) {
+                display.put("Lore", display.getList("OriginalLore", 8));
+                display.remove("OriginalLore");
+            }
+        }
+        // If shiny was used
+        if (tag.contains("fakeench")) {
+            int orig = tag.getInt("HideFlagsOrig");
+            if (tag.contains("HideFlagsOrig") && orig != 1) {
+                tag.putInt("HideFlags", orig);
+            } else {
+                tag.remove("HideFlags");
+            }
+            tag.remove("fakeench");
+            tag.remove("Enchantments");
+            tag.remove("HideFlagsOrig");
+        }
+        return tag;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 76d177d27735e93bbac5f9cf0b3556e929d72317..03e10fbd122f6967143599b38426a21daf9e59df 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -86,6 +86,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     public com.mojang.authlib.properties.Property[] spoofedProfile;
     public boolean preparing = true;
     // Spigot End
+    public boolean isProxied = false; // EMC // Prismarine - EMC patches
     private PacketListener packetListener;
     private Component disconnectedReason;
     private boolean encrypted;
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 896a4237f871d46cf39b0721e909c2cc3b5fc728..702e6b3b27582e1cf41010b2d23ce310be83a9da 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -499,6 +499,7 @@ public class FriendlyByteBuf extends ByteBuf {
                 // CraftItemStack.setItemMeta(stack, CraftItemStack.getItemMeta(stack)); // Paper - This is no longer needed due to NBT being supported
                 // Spigot end
                 nbttagcompound = stack.getTag();
+                nbttagcompound = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound, true); // EMC // Prismarine - EMC patches
                 // Paper start
                 if (nbttagcompound != null && nbttagcompound.contains("SkullOwner", 10)) {
                     CompoundTag owner = nbttagcompound.getCompound("SkullOwner");
@@ -527,6 +528,7 @@ public class FriendlyByteBuf extends ByteBuf {
             itemstack.setTag(this.readNbt());
             // CraftBukkit start
             if (itemstack.getTag() != null) {
+                com.empireminecraft.api.HiddenItemMeta.restoreItemLore(itemstack.tag); // EMC - get around creative menu having ultimate control of the NBT... // Prismarine - EMC patches
                 // Paper start - Fix skulls of same owner - restore orig ID since we changed it on send to client
                 if (itemstack.tag.contains("SkullOwnerOrig")) {
                     CompoundTag owner = itemstack.tag.getCompound("SkullOwner");
diff --git a/src/main/java/net/minecraft/network/chat/HoverEvent.java b/src/main/java/net/minecraft/network/chat/HoverEvent.java
index b31ff9d237f593e58b42b453632aa2c2af74f986..fa5b6d181a167a5ad4615a3747b87aab62d74225 100644
--- a/src/main/java/net/minecraft/network/chat/HoverEvent.java
+++ b/src/main/java/net/minecraft/network/chat/HoverEvent.java
@@ -246,7 +246,7 @@ public class HoverEvent {
         @Nullable
         private ItemStack itemStack;
 
-        ItemStackInfo(Item item, int count, @Nullable CompoundTag nbt) {
+        public ItemStackInfo(Item item, int count, @Nullable CompoundTag nbt) { // EMC - make public // Prismarine - EMC patches
             this.item = item;
             this.count = count;
             this.tag = nbt;
diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index e8e49e1bdf1ff4ea60a4feb6ec52d999cbced256..65e9d8789b946ffc8e41d61200463ab194d9ad0a 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -550,7 +550,13 @@ public final class MCUtil {
         }
         String string = compound.getString(key);
         try {
-            return Component.Serializer.fromJson(string);
+            // Prismarine start - EMC tweaks
+            if (net.prismarineteam.prismarine.PrismarineConfig.useLenientJson) {
+                return Component.Serializer.fromJsonLenient(string);
+            } else {
+                return Component.Serializer.fromJson(string);
+            }
+            // Prismarine end
         } catch (com.google.gson.JsonParseException e) {
             org.bukkit.Bukkit.getLogger().warning("Unable to parse " + key + " from " + compound +": " + e.getMessage());
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 72df9c6d1ac2fef090b0532da079c607f79bce89..8278fe18a774ac2a0fac49bf21082aa8a83357da 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1431,7 +1431,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // SPIGOT-6415: Don't call spawn event for entities which travel trough worlds,
         // since it is only an implementation detail, that a new entity is created when
         // they are traveling between worlds.
-        this.addDuringTeleport(entity, null);
+        // Prismarine start - EMC tweaks
+        if (this.getMinecraftWorld().prismarineConfig.allowForceSpawns) {
+            this.addDuringTeleport(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FORCE);
+        } else {
+            this.addDuringTeleport(entity, null);
+        }
+        // Prismarine end
     }
 
     public void addDuringTeleport(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
@@ -1890,6 +1896,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
     public @Nullable BlockPos findNearestMapFeature(HolderSet<ConfiguredStructureFeature<?, ?>> holderSet, BlockPos pos, int radius, boolean skipExistingChunks) {
         {
+            if (!prismarineConfig.generateStructures) return null; // Prismarine - EMC tweaks
             {
                 Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair = this.getChunkSource().getGenerator().findNearestMapFeature(this, holderSet, pos, radius, skipExistingChunks);
                 // Paper end
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index bbdfd821221bf776aa9305d2e313940d70b2af6b..25695f2f9afc0c5ecc7de716c44a9a58b9066585 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2188,6 +2188,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private void handleChat(TextFilter.FilteredText message) {
         if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
             this.send(new ClientboundChatPacket((new TranslatableComponent("chat.disabled.options")).withStyle(ChatFormatting.RED), ChatType.SYSTEM, Util.NIL_UUID));
+        } else if (!player.didPlayerJoinEvent) { return; // EMC - do not handle chat messages before they joined // Prismarine - EMC tweaks
         } else {
             this.player.resetLastActionTime();
             String s = message.getRaw();
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index e8a79277f3e57bc82d67ada6543c7f8665311bd3..08421abfedeedda61d58c4bf6495f3eb9818be19 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -92,7 +92,8 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 } else {
                     this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
                 // Paper start - handshake event
-                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+                String ip = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress().getHostAddress(); // EMC // Prismarine - EMC patches
+                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee && (net.prismarineteam.prismarine.PrismarineConfig.useBungeecordAddressLimit ? net.prismarineteam.prismarine.PrismarineConfig.bungeecordAddresses.contains(ip) : true); // EMC // Prismarine - EMC patches
                 boolean handledByEvent = false;
                 // Try and handle the handshake through the event
                 if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
@@ -121,6 +122,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                     if (!handledByEvent && proxyLogicEnabled) {
                         // Paper end
                     // if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
+                        connection.isProxied = true; // EMC // Prismarine - EMC patches
                         if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) { // Paper
                             // Paper start - Unix domain socket support
                             java.net.SocketAddress socketAddress = connection.getRemoteAddress();
@@ -128,7 +130,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                             connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
                             // Paper end
                             connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
-                        } else
+                        } else if (!net.prismarineteam.prismarine.PrismarineConfig.useBungeecordAddressLimit) // EMC // Prismarine - EMC patches
                         {
                             TranslatableComponent chatmessage = new TranslatableComponent("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 00a5731e7b1e2b84453e6d1416dce8bd9e1b1b10..e3d63bcbb84f31f14681de59936d73bb25b039e5 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -262,7 +262,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
             }
         }
         // Paper end - validate usernames
-        if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
+        if (!this.connection.isProxied && this.server.usesAuthentication() && !this.connection.isMemoryConnection()) { // EMC - add !isProxied // Prismarine - EMC patches
             this.state = ServerLoginPacketListenerImpl.State.KEY;
             this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
         } else {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index e4090fa0f01078277d70b1a88e870a56f6b1cb0f..acc31c253063cbb6ee20a1ce0e7f727e20f0a897 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -83,7 +83,14 @@ public class DataFixers {
     public DataFixers() {}
 
     private static DataFixer createFixerUpper() {
-        DataFixerBuilder datafixerbuilder = new DataFixerBuilder(SharedConstants.getCurrentVersion().getWorldVersion());
+        // Prismarine start - EMC patches
+        DataFixerBuilder datafixerbuilder;
+        if (net.prismarineteam.prismarine.PrismarineConfig.useEMCDataFixers) {
+            datafixerbuilder = new com.empireminecraft.DataConverters(SharedConstants.getCurrentVersion().getWorldVersion()); // EMC
+        } else {
+            datafixerbuilder = new DataFixerBuilder(SharedConstants.getCurrentVersion().getWorldVersion());
+        }
+        // Prismarine end
 
         DataFixers.addFixers(datafixerbuilder);
         return datafixerbuilder.build(Util.bootstrapExecutor());
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 390a70b9d9aa40a2511ab6588df2833a34682e5a..abde2c8de399d2e057d5cf255d0ce9ce3dcfa47c 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -307,7 +307,13 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
             mobEffectInstance = loadSpecifiedEffect(type, nbt.getCompound("HiddenEffect"));
         }
 
-        return new MobEffectInstance(type, j, i < 0 ? 0 : i, bl, bl2, bl3, key, mobEffectInstance); // Purpur - add key
+        // Prismarine start - EMC tweaks
+        if (net.prismarineteam.prismarine.PrismarineConfig.allowNegativeAmplifierValues) {
+            return new MobEffectInstance(type, j, i, bl, bl2, bl3, key, mobEffectInstance);
+        } else {
+            return new MobEffectInstance(type, j, i < 0 ? 0 : i, bl, bl2, bl3, key, mobEffectInstance); // Purpur - add key
+        }
+        // Prismarine end
     }
 
     public void setNoCounter(boolean permanent) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 75f4749c35a4cc35bc8617b1ba5c74ef198a423c..1158164a5debe060904d30f486083280ba3a231d 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -747,6 +747,13 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         return this.getHealth() <= this.getMaxHealth() / 2.0F;
     }
 
+    // Prismarine start - EMC tweaks
+    @Override
+    public boolean removeWhenFarAway(double distanceSquared) {
+        return this.level.prismarineConfig.witherCanDespawn;
+    }
+    // Prismarine end
+
     @Override
     public MobType getMobType() {
         return MobType.UNDEAD;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 5b221b9026ed0a357669a0422bdff2524b5e372a..31005d800319e701d3358bd6200082ac7e5e8a53 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -801,6 +801,7 @@ public abstract class Player extends LivingEntity {
             this.level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
+                if (this.level.prismarineConfig.doNotReturnItemToPlayerOnDropCancelled) return null;
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7471e59ad3362bc3d0bad6555fe29a9bb9ad74a6..75163ef6ddf1b4da8a4d97522228e674c26aa1d6 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -14,7 +14,6 @@ import java.text.DecimalFormatSymbols;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.Locale;
 import java.util.Map.Entry;
@@ -32,10 +31,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
+import net.minecraft.nbt.*; // EMC // Prismarine - EMC patches
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
@@ -228,6 +224,7 @@ public final class ItemStack {
         this.count = count;
         if (this.item != null && this.item.canBeDepleted()) {
             this.setDamageValue(this.getDamageValue());
+            if (this.tag != null && this.tag.contains("RepairCost") && net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) this.tag.remove("RepairCost"); // Prismarine - EMC tweaks
         }
 
         this.updateEmptyCacheFlag();
@@ -259,6 +256,7 @@ public final class ItemStack {
             // CraftBukkit end
             this.processEnchantOrder(this.tag); // Paper
             this.processText(); // Paper
+            if (item == Items.WRITTEN_BOOK && tag.contains("generation") && net.prismarineteam.prismarine.PrismarineConfig.blockWrittenBooksCopy) tag.remove("generation");
             this.getItem().verifyTagAfterLoad(this.tag);
         }
 
@@ -1188,10 +1186,12 @@ public final class ItemStack {
     }
 
     public int getBaseRepairCost() {
+        if (net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) return 0; // Prismarine - EMC tweaks
         return this.hasTag() && this.tag.contains("RepairCost", 3) ? this.tag.getInt("RepairCost") : 0;
     }
 
     public void setRepairCost(int repairCost) {
+        if (net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) return; // Prismarine - EMC tweaks
         // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
         if (repairCost == 0) {
             this.removeTagKey("RepairCost");
@@ -1265,8 +1265,28 @@ public final class ItemStack {
         MutableComponent ichatmutablecomponent1 = ComponentUtils.wrapInSquareBrackets(ichatmutablecomponent);
 
         if (!this.emptyCacheFlag) {
+            // Prismarine start - EMC patches
+            // EMC start
+            CompoundTag nbttagcompound = this.save(new CompoundTag());
+            if (nbttagcompound.contains("tag")) {
+                CompoundTag tag = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound.getCompound("tag"), false);
+                CompoundTag display = tag.getCompound("display");
+                if (display.contains("Lore")) {
+                    ListTag lore = display.getList("Lore", 8);
+                    ListTag newlore = new ListTag();
+                    for (int i = 0; i < lore.size(); i++) {
+                        String line = lore.getString(i);
+                        String newline = (line.isEmpty() ? " " : line);
+                        newlore.add(StringTag.valueOf(newline));
+                    }
+                    display.put("Lore", newlore);
+                }
+                nbttagcompound.put("tag", tag);
+            }
+            // EMC end
+            // Prismarine end
             ichatmutablecomponent1.withStyle(this.getRarity().color).withStyle((chatmodifier) -> {
-                return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
+                return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this.getItem(), this.getCount(), nbttagcompound))); // EMC - use different constructor // Prismarine - EMC patches
             });
         }
 
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 9a402505375af2051673245ec0a1daf9f3a66dc7..68f043207b7a3f239f5cd1147350239e9bd87669 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -53,7 +53,7 @@ public class MerchantOffer {
         this.result = ItemStack.of(nbt.getCompound("sell"));
         this.uses = nbt.getInt("uses");
         if (nbt.contains("maxUses", 99)) {
-            this.maxUses = nbt.getInt("maxUses");
+            this.maxUses = Math.min(net.prismarineteam.prismarine.PrismarineConfig.maxVillagerTradeLimit, nbt.getInt("maxUses"));
         } else {
             this.maxUses = 4;
         }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 1d72f0e63c5a64a82439d828a7182465fe7238ef..fefd4f11c0b3c31502425d2378915b826f355c46 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -816,7 +816,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public boolean destroyBlock(BlockPos pos, boolean drop, @Nullable Entity breakingEntity, int maxUpdateDepth) {
-        BlockState iblockdata = this.getBlockState(pos);
+        // Prismarine start - EMC tweaks
+        BlockState iblockdata;
+        if (this.prismarineConfig.doNotLoadChunksForPhysics) {
+            iblockdata = this.getBlockStateIfLoaded(pos);
+        } else {
+            iblockdata = this.getBlockState(pos);
+        }
+        // Prismarine end
 
         if (iblockdata.isAir()) {
             return false;
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 303ad9eab2e0a9b73597ca4ee9d70bea1979c5dd..c31ed963e80744d4dc86ceef3085bc6a05d94eef 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -406,6 +406,7 @@ public final class NaturalSpawner {
 
     public static boolean isInNetherFortressBounds(BlockPos pos, ServerLevel world, MobCategory spawnGroup, StructureFeatureManager structureAccessor) {
         if (spawnGroup == MobCategory.MONSTER && world.getBlockState(pos.below()).is(Blocks.NETHER_BRICKS)) {
+            if (world.getMinecraftWorld().prismarineConfig.doNotRequireNetherFortressForMobSpawning && world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER) return true; // Prismarine - EMC tweaks
             ConfiguredStructureFeature<?, ?> structurefeature = (ConfiguredStructureFeature) structureAccessor.registryAccess().registryOrThrow(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY).get(BuiltinStructures.FORTRESS);
 
             return structurefeature == null ? false : structureAccessor.getStructureAt(pos, structurefeature).isValid();
diff --git a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
index fa6eaf7041b6a8b17c64322307839dbd358ad3ab..d211dcda932e6a82f07c6bb9b2a664ff7a2aff29 100644
--- a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
@@ -94,7 +94,7 @@ public class StructureFeatureManager {
     }
 
     public boolean shouldGenerateFeatures() {
-        return this.worldGenSettings.generateFeatures();
+        return this.worldGenSettings.generateFeatures() && this.level.getMinecraftWorld().prismarineConfig.generateStructures; // Prismarine - EMC tweaks
     }
 
     public StructureStart getStructureAt(BlockPos pos, ConfiguredStructureFeature<?, ?> configuredStructureFeature) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 0fa91bd87dfec9cf8311bcbd5125caf6e308e90e..83112f710bf4672c5a3caace3a7e63e50f0fc484 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -263,7 +263,13 @@ public abstract class BlockEntity {
     // CraftBukkit start - add method
     public InventoryHolder getOwner() {
         // Paper start
-        return getOwner(true);
+        // Prismarine start - EMC tweaks
+        if (this.level.prismarineConfig.doNotUseSnapshotsForTileEntityGetOwner) {
+            return getOwner(false);
+        } else {
+            return getOwner(true);
+        }
+        // Prismarine end
     }
     public InventoryHolder getOwner(boolean useSnapshot) {
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index da00f75ccc9f8c2e2174d4450479202a50844245..1553ff187b2489c2893d7483040705fc71b561f9 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -69,6 +69,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     }
 
     public void unpackLootTable(@Nullable Player player) {
+        if (this.level.prismarineConfig.doNotTriggerLootableRefreshForNonPlayerInteraction && player == null) return; // Prismarine - EMC tweaks
         if (this.lootableData.shouldReplenish(player) && this.level.getServer() != null) { // Paper
             LootTable lootTable = this.level.getServer().getLootTables().get(this.lootTable);
             if (player instanceof ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e837091037402e990f763903d851c2f70888ada7..6f2c3b30e7ce7ec91605bc6207069b348ea6e477 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -987,7 +987,15 @@ public abstract class BlockBehaviour {
                 Direction enumdirection = aenumdirection[l];
 
                 blockposition_mutableblockposition.setWithOffset(pos, enumdirection);
-                BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                // Prismarine start - EMC tweaks
+                BlockState iblockdata;
+                if (world.getMinecraftWorld().prismarineConfig.doNotLoadChunksForPhysics) {
+                    iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                } else {
+                    iblockdata = world.getBlockStateIfLoaded(blockposition_mutableblockposition);
+                }
+                if (iblockdata == null) { continue; }
+                // Prismarine end
                 BlockState iblockdata1 = iblockdata.updateShape(enumdirection.getOpposite(), this.asState(), world, blockposition_mutableblockposition, pos);
 
                 Block.updateOrDestroy(iblockdata, iblockdata1, world, blockposition_mutableblockposition, flags, maxUpdateDepth);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 954e141e5617d6d52e2f3008c25fe9e2fe2f0f9a..5c86c295ec1cc386159eff9f0868a8a6a289fbe5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -47,7 +47,7 @@ public class ChunkStatus {
     });
     public static final ChunkStatus STRUCTURE_STARTS = ChunkStatus.register("structure_starts", ChunkStatus.EMPTY, 0, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
         if (!ichunkaccess.getStatus().isOrAfter(chunkstatus)) {
-            if (worldserver.serverLevelData.worldGenSettings().generateFeatures()) { // CraftBukkit
+            if (worldserver.serverLevelData.worldGenSettings().generateFeatures() && worldserver.prismarineConfig.generateStructures) { // CraftBukkit // Prismarine - EMC tweaks
                 chunkgenerator.createStructures(worldserver.registryAccess(), worldserver.structureFeatureManager(), ichunkaccess, definedstructuremanager, worldserver.getSeed());
             }
 
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index 40e5718ed69146cbf1aef7819bda1b8822e2499d..e543014d55a5e96a74b4278680003c703248fe73 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -50,8 +50,8 @@ public class PrismarineConfig {
         commands = new HashMap<>();
         commands.put("prismarine", new PrismarineCommand("prismarine"));
 
-        version = getInt("config-version", 1);
-        set("config-version", 1);
+        version = getInt("config-version", 2);
+        set("config-version", 2);
 
         readConfig(PrismarineConfig.class, null);
     }
@@ -115,6 +115,11 @@ public class PrismarineConfig {
         return config.getDouble(path, config.getDouble(path));
     }
 
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat(path, config.getFloat(path));
+    }
+
     private static int getInt(String path, int def) {
         config.addDefault(path, def);
         return config.getInt(path, config.getInt(path));
@@ -145,4 +150,57 @@ public class PrismarineConfig {
         }
         return builder.build();
     }
+
+    public static boolean doNotProcessChatCommandsBeforePlayerHasJoined = true;
+    private static void doNotProcessChatCommandsBeforePlayerHasJoined() {
+        doNotProcessChatCommandsBeforePlayerHasJoined = getBoolean("settings.do-not-process-chat-commands-before-player-has-joined", doNotProcessChatCommandsBeforePlayerHasJoined);
+    }
+
+    public static boolean disableAnvilRepairCost = false;
+    private static void disableAnvilRepairCost() {
+        disableAnvilRepairCost = getBoolean("settings.disable-anvil-repair-cost", disableAnvilRepairCost);
+    }
+
+    public static boolean allowNegativeAmplifierValues = false;
+    private static void allowNegativeAmplifierValues() {
+        allowNegativeAmplifierValues = getBoolean("settings.allow-negative-amplifier-values", allowNegativeAmplifierValues);
+    }
+
+    public static boolean blockWrittenBooksCopy = false;
+    private static void blockWrittenBooksCopy() {
+        blockWrittenBooksCopy = getBoolean("settings.block-written-books-copy", blockWrittenBooksCopy);
+    }
+
+    public static boolean useLenientJson = false;
+    private static void useLenientJson() {
+        if (version < 2) {
+            set("settings.use-lenient-json", getBoolean("use-lenient-json", false));
+            set("use-lenient-json", null);
+        }
+        useLenientJson = getBoolean("settings.use-lenient-json", useLenientJson);
+    }
+
+    public static boolean useEMCDataFixers = false;
+    private static void useEMCDataFixers() {
+        useEMCDataFixers = getBoolean("settings.use-emc-datafixers", useEMCDataFixers);
+    }
+
+    public static float shieldDamageAmount = 3.0F;
+    private static void shieldDamageAmount() {
+        shieldDamageAmount = getFloat("settings.shield-damage-amount", shieldDamageAmount);
+    }
+
+    public static boolean useBungeecordAddressLimit = false;
+    public static List bungeecordAddresses = java.util.Collections.singletonList("127.0.0.1");
+    private static void bungeecordSupports() {
+        useBungeecordAddressLimit = getBoolean("settings.bungeecord.use-address-limit.enabled", useBungeecordAddressLimit);
+        bungeecordAddresses = getList("settings.bungeecord.use-address-limit.addresses", bungeecordAddresses);
+    }
+
+    public static boolean enableMaxVillagerTradeLimit = false;
+    public static int maxVillagerTradeLimit = 16;
+    private static void maxVillagerTradeLimit() {
+        enableMaxVillagerTradeLimit = getBoolean("settings.max-villager-trade-limit.enabled", enableMaxVillagerTradeLimit);
+        maxVillagerTradeLimit = getInt("settings.max-villager-trade-limit.limit", maxVillagerTradeLimit);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index 74020515e2ec917b7d921aa8501a71ff433a6abb..c6beb55dd7d66e7f7b40753106667a25de99efc6 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -75,4 +75,54 @@ public class PrismarineWorldConfig {
         final Map<String, Object> value = PrismarineConfig.getMap("world-settings." + worldName + "." + path, null);
         return value.isEmpty() ? fallback : value;
     }
+
+    public boolean generateStructures = true;
+    private void generateStructures() {
+        generateStructures = getBoolean("generate-structures", generateStructures);
+    }
+
+    public boolean doNotUseForceUnload = false;
+    private void doNotUseForceUnload() {
+        doNotUseForceUnload = getBoolean("do-not-use-force-unload", doNotUseForceUnload);
+    }
+
+    public boolean doNotTriggerLootableRefreshForNonPlayerInteraction = false;
+    private void doNotTriggerLootableRefreshForNonPlayerInteraction() {
+        doNotTriggerLootableRefreshForNonPlayerInteraction = getBoolean("do-not-trigger-lootable-refresh-for-non-player-interaction", doNotTriggerLootableRefreshForNonPlayerInteraction);
+    }
+
+    public boolean doNotReturnItemToPlayerOnDropCancelled = false;
+    private void doNotReturnItemToPlayerOnDropCancelled() {
+        doNotReturnItemToPlayerOnDropCancelled = getBoolean("do-not-return-item-to-player-on-drop-cancelled", doNotReturnItemToPlayerOnDropCancelled);
+    }
+
+    public boolean doNotUseSnapshotsForTileEntityGetOwner = false;
+    private void doNotUseSnapshotsForTileEntityGetOwner() {
+        doNotUseSnapshotsForTileEntityGetOwner = getBoolean("do-not-use-snapshots-for-tile-entity-get-owner", doNotUseSnapshotsForTileEntityGetOwner);
+    }
+
+    public boolean doNotUseBlockstateSnapshots = false;
+    private void doNotUseBlockstateSnapshots() {
+        doNotUseBlockstateSnapshots = getBoolean("do-not-use-blockstate-snapshots", doNotUseBlockstateSnapshots);
+    }
+
+    public boolean doNotLoadChunksForPhysics = false;
+    private void doNotLoadChunksForPhysics() {
+        doNotLoadChunksForPhysics = getBoolean("do-not-load-chunks-for-physics", doNotLoadChunksForPhysics);
+    }
+
+    public boolean doNotRequireNetherFortressForMobSpawning = false;
+    private void doNotRequireNetherFortressForMobSpawning() {
+        doNotRequireNetherFortressForMobSpawning = getBoolean("do-not-require-nether-fortress-for-mob-spawning", doNotRequireNetherFortressForMobSpawning);
+    }
+
+    public boolean allowForceSpawns = false;
+    private void allowForceSpawns() {
+        allowForceSpawns = false;
+    }
+
+    public boolean witherCanDespawn = true;
+    private void entitySettings() {
+        witherCanDespawn = getBoolean("wither.can-despawn", witherCanDespawn);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index d637bb8d52ee8e6ba8c7e48f1155e845841a5e97..afcfd65e9f84ae7da0364324fa022583b28865cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -407,7 +407,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean unloadChunk(int x, int z) {
-        return this.unloadChunk(x, z, true);
+        // Prismarine start - EMC tweaks
+        if (this.world.prismarineConfig.doNotUseForceUnload) {
+            return this.unloadChunkRequest(x, z);
+        } else {
+            return this.unloadChunk(x, z, true);
+        }
+        // Prismarine end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index bfe9dc935c87e01fb435d8b46ce413b84ca74856..3accc7d7f1be03ba748678c568d767050ac4079a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -326,7 +326,13 @@ public class CraftBlock implements Block {
 
     @Override
     public BlockState getState() {
-        return CraftBlockStates.getBlockState(this);
+        // Prismarine start - EMC tweaks
+        if (this.world.getMinecraftWorld().prismarineConfig.doNotUseBlockstateSnapshots) {
+            return CraftBlockStates.getBlockState(this, false);
+        } else {
+            return CraftBlockStates.getBlockState(this);
+        }
+        // Prismarine end
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 361bd8edcc6e6d0fbac958e3ec91d74a622d630a..d63105ee77933e78e2b9b8ebaa2c1deca923267c 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -711,7 +711,7 @@ public class CraftEventFactory {
             event = CraftEventFactory.callEntitySpawnEvent(entity);
         }
 
-        if (event != null && (event.isCancelled() || entity.isRemoved())) {
+        if (spawnReason != SpawnReason.FORCE && event != null && (event.isCancelled() || entity.isRemoved())) { // EMC - add != force // Prismarine - EMC tweaks
             Entity vehicle = entity.getVehicle();
             if (vehicle != null) {
                 vehicle.discard();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 5607dc10dc1c9d2dbf4e3007890e5e89a175605e..2f5c6032384a7103577292a81c55cad257f7694b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -384,7 +384,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.enchantments = CraftMetaItem.buildEnchantments(tag, CraftMetaItem.ENCHANTMENTS);
         this.attributeModifiers = CraftMetaItem.buildModifiers(tag, CraftMetaItem.ATTRIBUTES);
 
-        if (tag.contains(REPAIR.NBT)) {
+        if (!net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost && tag.contains(REPAIR.NBT)) { // Prismarine - EMC tweaks
             this.repairCost = tag.getInt(REPAIR.NBT);
         }
 

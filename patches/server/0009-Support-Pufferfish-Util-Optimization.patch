From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <alphakr93@outlook.com>
Date: Sun, 13 Feb 2022 14:09:05 +0900
Subject: [PATCH] Support Pufferfish Util Optimization


diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 34e571b702684673b89103176838dc246ff9b24d..e6264eabdac8ea2ccebd45ce9625e9e34f524e91 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -60,6 +60,7 @@ import net.minecraft.server.Bootstrap;
 import net.minecraft.util.Mth;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.world.level.block.state.properties.Property;
+import net.prismarineteam.prismarine.PrismarineConfig;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -392,16 +393,23 @@ public class Util {
 
     private static final CompletableFuture<?>[] EMPTY_FUTURE = new CompletableFuture[0]; // Paper
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> futures) {
-        // Paper start - optimize
-        return CompletableFuture.allOf(futures.toArray(EMPTY_FUTURE))
-            .thenApply(v -> {
-                List<V> list = Lists.newArrayListWithCapacity(futures.size());
-                for (CompletableFuture<? extends V> future : futures) {
-                    list.add(future.join());
-                }
-                return list;
-            });
-        // Paper end
+        // Prismarine start
+        if (PrismarineConfig.usePufferfishUtilOptimization) {
+            return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]))
+                    .thenApply(unused -> futures.stream().map(CompletableFuture::join).collect(Collectors.toList()));
+        } else {
+            // Paper start - optimize
+            return CompletableFuture.allOf(futures.toArray(EMPTY_FUTURE))
+                    .thenApply(v -> {
+                        List<V> list = Lists.newArrayListWithCapacity(futures.size());
+                        for (CompletableFuture<? extends V> future : futures) {
+                            list.add(future.join());
+                        }
+                        return list;
+                    });
+            // Paper end
+        }
+        // Prismarine end
     }
 
     public static <V> CompletableFuture<List<V>> sequenceFailFast(List<? extends CompletableFuture<? extends V>> futures) {
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index 4dad7fc69bd213fcd20c24b032e1fa70cc6d0366..baaefa2a52788bdfd8027cabeb001bea3cfee4b3 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -155,4 +155,9 @@ public class PrismarineConfig {
     private static void useAirplaneCollisionContext() {
         useNormalCollisionContext = getBoolean("settings.use-normal-collision-context", useNormalCollisionContext);
     }
+
+    public static boolean usePufferfishUtilOptimization = false;
+    private static void usePufferfishUtilOptimization() {
+        usePufferfishUtilOptimization = getBoolean("settings.use-pufferfish-util-optimization", usePufferfishUtilOptimization);
+    }
 }
\ No newline at end of file

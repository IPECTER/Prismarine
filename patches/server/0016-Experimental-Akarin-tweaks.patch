From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 3 Jul 2022 21:33:10 +0900
Subject: [PATCH] Experimental Akarin tweaks


diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 4fd709a550bf8da1e996894a1ca6b91206c31e9e..bd328d4d09f6fb885e343a039f5817f0ea7f33a7 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -24,6 +24,7 @@ import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
+import net.minecraft.server.MCUtil;
 import net.minecraft.util.GsonHelper;
 import org.slf4j.Logger;
 
@@ -148,36 +149,50 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public void save() throws IOException {
-        this.removeExpired(); // Paper - remove expired values before saving
-        JsonArray jsonarray = new JsonArray();
-        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
-            JsonObject jsonobject = new JsonObject();
+        // Prismarine start - Akarin tweaks (Save Json list asynchronously)
+        Runnable runnable = () -> {
+            this.removeExpired(); // Paper - remove expired values before saving
+            JsonArray jsonarray = new JsonArray();
+            Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+                JsonObject jsonobject = new JsonObject();
+
+                Objects.requireNonNull(jsonlistentry);
+                return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+            });
+
+            Objects.requireNonNull(jsonarray);
+            stream.forEach(jsonarray::add);
+            try {
+                BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
-            Objects.requireNonNull(jsonlistentry);
-            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
-        });
+                try {
+                    StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+                } catch (Throwable throwable) {
+                    if (bufferedwriter != null) {
+                        try {
+                            bufferedwriter.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
+                        }
+                    }
 
-        Objects.requireNonNull(jsonarray);
-        stream.forEach(jsonarray::add);
-        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+                    throw throwable;
+                }
 
-        try {
-            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
-        } catch (Throwable throwable) {
-            if (bufferedwriter != null) {
-                try {
+                if (bufferedwriter != null) {
                     bufferedwriter.close();
-                } catch (Throwable throwable1) {
-                    throwable.addSuppressed(throwable1);
                 }
+            } catch (IOException e) {
+                StoredUserList.LOGGER.warn("Failed to save " + this.file, e);
             }
+        };
 
-            throw throwable;
-        }
-
-        if (bufferedwriter != null) {
-            bufferedwriter.close();
+        if (net.prismarineteam.prismarine.PrismarineConfig.storePlayerJsonListAsynchronously) {
+            MCUtil.scheduleAsyncTask(runnable);
+        } else {
+            runnable.run();
         }
+        // Prismarine end
 
     }
 
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index c75dbff6a8fa85f461a67e25ad73aad8f4199554..fc5598c3ee6b2872ce9216508c490c26666c4d98 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -230,4 +230,9 @@ public class PrismarineConfig {
         disableChatReport = getBoolean("settings.disable-chat-report.enabled", disableChatReport);
         convertToGameMessage = getBoolean("settings.disable-chat-report.convert-to-game-message", convertToGameMessage);
     }
+
+    public static boolean storePlayerJsonListAsynchronously = false;
+    private static void storePlayerJsonListAsynchronously() {
+        storePlayerJsonListAsynchronously = getBoolean("settings.store-player-json-list-asynchronously", storePlayerJsonListAsynchronously);
+    }
 }
\ No newline at end of file

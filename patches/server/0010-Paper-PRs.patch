From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 17 Apr 2022 13:29:05 +0900
Subject: [PATCH] Paper PRs

Originals by:
Don't send itemmeta for books when hide-itemmeta is enabled (By Noah van der Aa <ndvdaa@gmail.com>) (PaperMC/Paper#7734)
Add support for Proxy Protocol (By PanSzelescik <panszelescik@gmail.com>) (PaperMC/Paper#7710)
Prevent healing by negative amounts (bybooky10 <boooky10@gmail.com>) (PaperMC/Paper#7703)
Fix ground pathfinding (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7683)
Fire CauldronLevelChangeEvent on initial fill (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7678)
Fix NPE for BlockDataMeta#getBlockData (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7670)
Grant temporary immunity from EAR to moving entities (issue PaperMC/Paper#7637) (petersv5) (PaperMC/Paper#7644)
Fix async entity add due to fungus trees (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7626)
Fix duplicate world keys via createWorld (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7614)
Fix opening inv in PlayerRecipeBookClickEvent handler (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7552)
Ignore BaseSpawner impossible spawn tick (dannyball710 <dannyball710@gmail.com>) (PaperMC/Paper#7469)
Trigger bee_nest_destroyed trigger in the correct place (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7436)
Sync offhand slot in menus (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7341)
Don't tick markers (Noah van der Aa <ndvdaa@gmail.com>) (PaperMC/Paper#7299)
Added fire-tick-delay config option (Jan Trummer <jan.trummer@hotmail.com>) (PaperMC/Paper#7280)
Fire entity knockback event for ownerless tnt (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7171)
Save value for setCanMobPickup (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7108)
Fully remove spigot's tick limiters (Simon Gardling <titaniumtown@gmail.com>) (PaperMC/Paper#7106)
Use DataConverter for itemstack/entity deserialization (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#7068)
Sanitize Sent BlockEntity NBT (Owen1212055 <23108066+Owen1212055@users.noreply.github.com>) (PaperMC/Paper#7010)
Improvement in Configurable door difficulty (Doc94) (PaperMC/Paper#6985)
Implement Velocity VarInt optimizations (astei <andrew@steinborn.me>) (PaperMC/Paper#6957)
Fix placeable/destory keys deserialization from spigot (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#6706)
Convert section chars in components to components in more places (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#6704)
Fix CME in CraftPersistentDataTypeRegistry (Gero <gecam59@gmail.com>) (PaperMC/Paper#6701)
Ignore NBT limits when loaded not loaded from a block place (Jake Potrebic <jake.m.potrebic@gmail.com>) (PaperMC/Paper#5751)
Implement mobspawning back off mechanic (kickash32 <kickash32@gmail.com>) (PaperMC/Paper#5460)
fix enderman universal anger (Trigary <trigary0@gmail.com>) (PaperMC/Paper#5156)

Copyright (C) 2022 PaperMC Team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index d0c55497040158d959693ef2ddf3ff03bd6df05f..a0cd4d8de553cdafa441eddb736d3d350b729eec 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -614,7 +614,7 @@ public class PaperCommand extends Command {
                     ChunkPos chunk = e.chunkPosition();
                     info.left++;
                     info.right.put(chunk, info.right.getOrDefault(chunk, 0) + 1);
-                    if (!chunkProviderServer.isPositionTicking(e)) {
+                    if (!chunkProviderServer.isPositionTicking(e) || e instanceof net.minecraft.world.entity.Marker) { // Markers aren't ticked // Prismarine - Paper PR
                         nonEntityTicking.merge(key, Integer.valueOf(1), Integer::sum);
                     }
                 });
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index ad3f0ff353a0448babde334641d1b1ac94779b07..10659307bf52e81bfab85f1d03b0a343889d440c 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -135,24 +135,28 @@ public class PaperWorldConfig {
         disableMobSpawnerSpawnEggTransformation = getBoolean("game-mechanics.disable-mob-spawner-spawn-egg-transformation", disableMobSpawnerSpawnEggTransformation);
     }
 
-    public List<net.minecraft.world.Difficulty> zombieBreakDoors;
-    public List<net.minecraft.world.Difficulty> vindicatorBreakDoors;
+    // Prismarine start - Paper PR
+    private final List<net.minecraft.world.entity.EntityType<?>> entitiesValidForBreakDoors = Arrays.asList(net.minecraft.world.entity.EntityType.ZOMBIE, net.minecraft.world.entity.EntityType.ZOMBIE_VILLAGER, net.minecraft.world.entity.EntityType.HUSK, net.minecraft.world.entity.EntityType.ZOMBIFIED_PIGLIN, net.minecraft.world.entity.EntityType.VINDICATOR);
+    public java.util.Map<net.minecraft.world.entity.EntityType<?>, java.util.List<net.minecraft.world.Difficulty>> entitiesDifficultyBreakDoors = new it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap<>();
     private void setupEntityBreakingDoors() {
-        zombieBreakDoors = getEnumList(
-            "door-breaking-difficulty.zombie",
-            java.util.Arrays.stream(net.minecraft.world.Difficulty.values())
-                .filter(net.minecraft.world.entity.monster.Zombie.DOOR_BREAKING_PREDICATE)
-                .collect(Collectors.toList()),
-            net.minecraft.world.Difficulty.class
-        );
-        vindicatorBreakDoors = getEnumList(
-            "door-breaking-difficulty.vindicator",
-            java.util.Arrays.stream(net.minecraft.world.Difficulty.values())
-                .filter(net.minecraft.world.entity.monster.Vindicator.DOOR_BREAKING_PREDICATE)
-                .collect(Collectors.toList()),
-            net.minecraft.world.Difficulty.class
-        );
+        for (net.minecraft.world.entity.EntityType<?> entityType : entitiesValidForBreakDoors) {
+            java.util.function.Predicate<net.minecraft.world.Difficulty> difficultyPredicate = net.minecraft.world.entity.monster.Zombie.DOOR_BREAKING_PREDICATE;
+            if (entityType.getBaseClass() == net.minecraft.world.entity.monster.Vindicator.class) {
+                difficultyPredicate = net.minecraft.world.entity.monster.Vindicator.DOOR_BREAKING_PREDICATE;
+            }
+            entitiesDifficultyBreakDoors.put(
+                    entityType,
+                    getEnumList(
+                            "door-breaking-difficulty." + entityType.id,
+                            java.util.Arrays.stream(net.minecraft.world.Difficulty.values())
+                                    .filter(difficultyPredicate)
+                                    .collect(Collectors.toList()),
+                            net.minecraft.world.Difficulty.class
+                    )
+            );
+        }
     }
+    // Prismarine end
 
     public Map<net.minecraft.world.entity.EntityType<?>, Integer> entityPerChunkSaveLimits = new HashMap<>();
     private void entityPerChunkSaveLimits() {
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 896a4237f871d46cf39b0721e909c2cc3b5fc728..ee899b937322deb45cbbe6be36559ee40a158c07 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -66,18 +66,23 @@ public class FriendlyByteBuf extends ByteBuf {
     public static final short MAX_STRING_LENGTH = 32767;
     public static final int MAX_COMPONENT_STRING_LENGTH = 262144;
 
+    // Prismarine start - Paper PR
+    // Paper start - Optimize VarInts
+    private static final int[] VARINT_EXACT_BYTE_LENGTHS = new int[33];
+    static {
+        for (int i = 0; i <= 32; ++i) {
+            VARINT_EXACT_BYTE_LENGTHS[i] = (int) Math.ceil((31d - (i - 1)) / 7d);
+        }
+        VARINT_EXACT_BYTE_LENGTHS[32] = 1; // Special case for the number 0.
+    }
+    // Paper end - Optimize VarInts
+    // Prismarine end
     public FriendlyByteBuf(ByteBuf parent) {
         this.source = parent;
     }
 
     public static int getVarIntSize(int value) {
-        for (int j = 1; j < 5; ++j) {
-            if ((value & -1 << j * 7) == 0) {
-                return j;
-            }
-        }
-
-        return 5;
+        return VARINT_EXACT_BYTE_LENGTHS[Integer.numberOfLeadingZeros(value)]; // Paper - Optimize VarInts // Prismarine - Paper PR
     }
 
     public static int getVarLongSize(long value) {
@@ -420,7 +425,25 @@ public class FriendlyByteBuf extends ByteBuf {
         return new UUID(this.readLong(), this.readLong());
     }
 
+    // Prismarine start - Paper PR
+    // Paper start - Optimize VarInts
     public FriendlyByteBuf writeVarInt(int value) {
+        // Peel the one and two byte count cases explicitly as they are the most common VarInt sizes
+        // that the proxy will write, to improve inlining.
+        if ((value & (0xFFFFFFFF << 7)) == 0) {
+            writeByte(value);
+        } else if ((value & (0xFFFFFFFF << 14)) == 0) {
+            int w = (value & 0x7F | 0x80) << 8 | (value >>> 7);
+            writeShort(w);
+        } else {
+            writeVarInt_(value);
+        }
+        return this;
+    }
+
+    public FriendlyByteBuf writeVarInt_(int value) {
+    // Paper end - Optimize VarInts
+    // Prismarine end
         while ((value & -128) != 0) {
             this.writeByte(value & 127 | 128);
             value >>>= 7;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
index 43220caaa331eade5b183f68f09d94542b4bc3db..8c87020e422acfb6b862d9d77e74114770f1b342 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
@@ -17,7 +17,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
     private final CompoundTag tag;
 
     public static ClientboundBlockEntityDataPacket create(BlockEntity blockEntity, Function<BlockEntity, CompoundTag> nbtGetter) {
-        return new ClientboundBlockEntityDataPacket(blockEntity.getBlockPos(), blockEntity.getType(), nbtGetter.apply(blockEntity));
+        return new ClientboundBlockEntityDataPacket(blockEntity.getBlockPos(), blockEntity.getType(), blockEntity.sanitizeSentNbt(nbtGetter.apply(blockEntity))); // Paper - Sanitize sent data
     }
 
     public static ClientboundBlockEntityDataPacket create(BlockEntity blockEntity) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 0e75764c108c24b3e2c453f2b4f14e798add0eb4..731fd8dce2d1e2f8c05cf8dd3fbef2d838bd8cdb 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -184,6 +184,7 @@ public class ClientboundLevelChunkPacketData {
             BlockPos blockPos = blockEntity.getBlockPos();
             if (blockEntity instanceof net.minecraft.world.level.block.entity.SkullBlockEntity) { net.minecraft.world.level.block.entity.SkullBlockEntity.sanitizeTileEntityUUID(compoundTag); } // Paper
             int i = SectionPos.sectionRelative(blockPos.getX()) << 4 | SectionPos.sectionRelative(blockPos.getZ());
+            blockEntity.sanitizeSentNbt(compoundTag); // Paper - Sanitize sent data // Prismarine - Paper PR
             return new ClientboundLevelChunkPacketData.BlockEntityInfo(i, blockPos.getY(), blockEntity.getType(), compoundTag.isEmpty() ? null : compoundTag);
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8066c874098039f75017e6bebd7981fd4804bcda..7cf00095e2f50590662f55adeb797814616b27e7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -2501,6 +2501,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         public void onTickingStart(Entity entity) {
+            if (entity instanceof net.minecraft.world.entity.Marker) return; // Paper - Don't tick markers // Prismarine - Paper PR
             ServerLevel.this.entityTickList.add(entity);
             ServerLevel.this.entityManager.addNavigatorsIfPathingToRegion(entity); // Paper - optimise notify
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index f280aaa6d1ed35ffb5f746631c36467b63a7bd56..12a7b29a50fa886bff0d1d4a9dbec982adf2b18b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -282,6 +282,15 @@ public class ServerPlayer extends Player {
 
             }
 
+            // Prismarine start - Paper PR
+            // Paper start
+            @Override
+            public void sendOffHandSlotChange() {
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
+            }
+            // Paper end
+            // Prismarine end
+
             @Override
             public void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack) {
                 ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.incrementStateId(), slot, stack));
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 1c4fe18c814a48997f5fd4cf07b796cde9838188..030283c5de7803198eebda3f25d23e32aeb8bff8 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -459,12 +459,16 @@ public class ServerPlayerGameMode {
                     block.destroy(this.level, pos, iblockdata);
                 }
 
+                ItemStack mainHandCopy = null; // Paper // Prismarine - Paper PR
+                boolean isCorrectTool = false; // Paper // Prismarine - Paper PR
                 if (this.isCreative() || (this.level.purpurConfig.shulkerBoxAllowOversizedStacks && block instanceof net.minecraft.world.level.block.ShulkerBoxBlock)) { // Purpur
                     // return true; // CraftBukkit
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
                     boolean flag1 = this.player.hasCorrectToolForDrops(iblockdata);
+                    mainHandCopy = itemstack1; // Paper // Prismarine - Paper PR
+                    isCorrectTool = flag1; // Paper // Prismarine - Paper PR
 
                     itemstack.mineBlock(this.level, iblockdata, pos, this.player);
                     if (flag && flag1 && event.isDropItems()) { // CraftBukkit - Check if block should drop items
@@ -486,6 +490,16 @@ public class ServerPlayerGameMode {
                     iblockdata.getBlock().popExperience(this.level, pos, event.getExpToDrop(), this.player); // Paper
                 }
 
+                // Prismarine start - Paper PR
+                // Paper start - trigger after items are dropped (check impls of block#playerDestroy)
+                if (mainHandCopy != null) {
+                    if (flag && isCorrectTool && event.isDropItems() && block instanceof net.minecraft.world.level.block.BeehiveBlock && tileentity instanceof net.minecraft.world.level.block.entity.BeehiveBlockEntity beehiveBlockEntity) { // simulates the guard on block#playerDestroy above
+                        CriteriaTriggers.BEE_NEST_DESTROYED.trigger(player, iblockdata, mainHandCopy, beehiveBlockEntity.getOccupantCount());
+                    }
+                }
+                // Paper end
+                // Prismarine end
+
                 return true;
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index c4b2a50ad65b4ca2f8cc5903213c70cafde3e41c..6c5cfe0509c6f84064e5b37f8f945ff5f769d888 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -219,6 +219,7 @@ public class WorldGenRegion implements WorldGenLevel {
         if (iblockdata.isAir()) {
             return false;
         } else {
+            if (drop) LOGGER.warn("Potential async entity add during worldgen", new Throwable()); // Paper - log when this happens // Prismarine - Paper PR
             if (false) { // CraftBukkit - SPIGOT-6833: Do not drop during world generation
                 BlockEntity tileentity = iblockdata.hasBlockEntity() ? this.getBlockEntity(pos) : null;
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 058fb3696c7ece4a7b6971886b1760b26add733b..2376d9da86df406298325b97b9209aebf588b457 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -109,6 +109,14 @@ public class ServerConnectionListener {
             ServerConnectionListener.LOGGER.info("Paper: Using " + com.velocitypowered.natives.util.Natives.cipher.getLoadedVariant() + " cipher from Velocity.");
             // Paper end
 
+            // Prismarine start - Paper PR
+            // Paper start - indicate Proxy Protocol usage
+            if (net.prismarineteam.prismarine.PrismarineConfig.useProxyProtocol) { // Prismarine (temp)
+                ServerConnectionListener.LOGGER.info("Prismarine: Using Proxy Protocol"); // Prismarine (temp)
+            }
+            // Paper end
+            // Prismarine end
+
             this.channels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) {
                     try {
@@ -122,6 +130,30 @@ public class ServerConnectionListener {
                     int j = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
                     Object object = j > 0 ? new RateKickingConnection(j) : new Connection(PacketFlow.SERVERBOUND);
 
+                    // Prismarine start - Paper PR
+                    // Paper start - Add support for Proxy Protocol
+                    if (net.prismarineteam.prismarine.PrismarineConfig.useProxyProtocol) { // Prismarine (temp)
+                        channel.pipeline().addAfter("timeout", "haproxy-decoder", new io.netty.handler.codec.haproxy.HAProxyMessageDecoder());
+                        channel.pipeline().addAfter("haproxy-decoder", "haproxy-handler", new ChannelInboundHandlerAdapter() {
+                            @Override
+                            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+                                if (msg instanceof io.netty.handler.codec.haproxy.HAProxyMessage message) {
+                                    String realaddress = message.sourceAddress();
+                                    int realport = message.sourcePort();
+
+                                    SocketAddress socketaddr = new java.net.InetSocketAddress(realaddress, realport);
+
+                                    Connection connection = (Connection) channel.pipeline().get("packet_handler");
+                                    connection.address = socketaddr;
+                                } else {
+                                    super.channelRead(ctx, msg);
+                                }
+                            }
+                        });
+                    }
+                    // Paper end
+                    // Prismarine end
+
                     // ServerConnectionListener.this.connections.add((Connection) object); // CraftBukkit - decompile error
                     pending.add((Connection) object); // Paper
                     channel.pipeline().addLast("packet_handler", (ChannelHandler) object);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 460282a6ca0c997879a9bea97568d7146c047719..14ae52b46ead599cda44cac29c93c5088839a5c7 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3048,9 +3048,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             com.destroystokyo.paper.event.player.PlayerRecipeBookClickEvent event = new com.destroystokyo.paper.event.player.PlayerRecipeBookClickEvent(
                 player.getBukkitEntity(), org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(packet.getRecipe()), packet.isShiftDown());
             if (event.callEvent()) {
-                this.server.getRecipeManager().byKey(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(event.getRecipe())).ifPresent((irecipe) -> {
-                    ((RecipeBookMenu) this.player.containerMenu).handlePlacement(event.isMakeAll(), irecipe, this.player);
-            });
+                // Prismarine start - Paper PR
+                if (this.player.containerMenu instanceof RecipeBookMenu<?> recipeBookMenu) {
+                    this.server.getRecipeManager().byKey(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(event.getRecipe())).ifPresent((irecipe) -> {
+                        recipeBookMenu.handlePlacement(event.isMakeAll(), irecipe, this.player);
+                    });
+                }
+                // Prismarine end
             } // Paper end
         }
     }
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index 8d569eb2ec1b2bdbd415094ae04ae531dfdeafae..334f432fdd347dd1ea4899dfaf3c946b9a01e876 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -99,7 +99,7 @@ public class MobEffect {
                 }
             }
         } else {
-            j = (int) (proximity * (double) (4 << amplifier) + 0.5D);
+            j = Math.max((int) (proximity * (double) (4 << amplifier) + 0.5D), 0); // Paper - Prevent healing by negative amounts // Prismarine - Paper PR
             target.heal((float) j, RegainReason.MAGIC); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 92154459fd46db7e9182952cc1f844298c2dcb3c..07279541e1be38286c7d4933d3485755e7572433 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3216,6 +3216,14 @@ public abstract class LivingEntity extends Entity {
                     tag.put("Enchantments", enchantments);
                 }
                 tag.remove("AttributeModifiers");
+
+                // Prismarine start - Paper PR
+                // Books
+                tag.remove("author");
+                tag.remove("filtered_title");
+                tag.remove("pages");
+                tag.remove("title");
+                // Prismarine end
             }
         }
         return copy;
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
index a6f8ca71ba5d107cfbd24b8e8a225195dc233637..c78a23c5d438baa818f74de8feb74af5ced164a2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -39,14 +39,14 @@ public class GroundPathNavigation extends PathNavigation {
     }
 
     @Override
-    public Path createPath(BlockPos target, int distance) {
+    public Path createPath(BlockPos target, @javax.annotation.Nullable Entity entity, int distance) { // Paper // Prismarine - Paper PR
         if (this.level.getBlockState(target).isAir()) {
             BlockPos blockPos;
             for(blockPos = target.below(); blockPos.getY() > this.level.getMinBuildHeight() && this.level.getBlockState(blockPos).isAir(); blockPos = blockPos.below()) {
             }
 
             if (blockPos.getY() > this.level.getMinBuildHeight()) {
-                return super.createPath(blockPos.above(), distance);
+                return super.createPath(blockPos.above(), entity, distance); // Paper // Prismarine - Paper PR
             }
 
             while(blockPos.getY() < this.level.getMaxBuildHeight() && this.level.getBlockState(blockPos).isAir()) {
@@ -57,13 +57,13 @@ public class GroundPathNavigation extends PathNavigation {
         }
 
         if (!this.level.getBlockState(target).getMaterial().isSolid()) {
-            return super.createPath(target, distance);
+            return super.createPath(target, entity, distance); // Paper // Prismarine - Paper PR
         } else {
             BlockPos blockPos2;
             for(blockPos2 = target.above(); blockPos2.getY() < this.level.getMaxBuildHeight() && this.level.getBlockState(blockPos2).getMaterial().isSolid(); blockPos2 = blockPos2.above()) {
             }
 
-            return super.createPath(blockPos2, distance);
+            return super.createPath(blockPos2, entity, distance); // Paper // Prismarine - Paper PR
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index d35032a8d2612d555c3dad1fe496d7ae1c5a285b..eae5e25ea48335cd07ccd5227404b506b0414e75 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -118,7 +118,7 @@ public abstract class PathNavigation {
         return this.createPath(target, null, distance);
     }
     @Nullable
-    public Path createPath(BlockPos target, Entity entity, int distance) {
+    public Path createPath(BlockPos target, @Nullable Entity entity, int distance) { // Prismarine - Paper PR
         return this.createPath(ImmutableSet.of(target), entity, 8, false, distance);
         // Paper end
     }
@@ -140,15 +140,15 @@ public abstract class PathNavigation {
 
     @Nullable
     protected Path createPath(Set<BlockPos> positions, int range, boolean useHeadPos, int distance, float followRange) {
-        return this.createPath(positions, null, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE));
+        return this.createPath(positions, null, range, useHeadPos, distance, followRange); // Prismarine - Paper PR
     }
 
     @Nullable
-    protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance) {
+    protected Path createPath(Set<BlockPos> positions, @Nullable Entity target, int range, boolean useHeadPos, int distance) { // Prismarine - Paper PR
         return this.createPath(positions, target, range, useHeadPos, distance, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE));
     }
 
-    @Nullable protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean useHeadPos, int distance, float followRange) {
+    @Nullable protected Path createPath(Set<BlockPos> positions, @Nullable Entity target, int range, boolean useHeadPos, int distance, float followRange) { // Prismarine - Paper PR
         // Paper end
         if (positions.isEmpty()) {
             return null;
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
index a7a0df982d1f2931fbbabc13d38ed42d0e06f6f0..7820c4d64cbd0e26927698df3cbe0df432737c38 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
@@ -16,9 +16,9 @@ public class WallClimberNavigation extends GroundPathNavigation {
     }
 
     @Override
-    public Path createPath(BlockPos target, int distance) {
+    public Path createPath(BlockPos target, @Nullable Entity entity, int distance) { // Paper // Prismarine
         this.pathToPosition = target;
-        return super.createPath(target, distance);
+        return super.createPath(target, entity, distance); // Paper // Prismarine
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index 1c5aa4e7b06c2b2ce32ea63140154db3c5c58231..ab00d76c8c15fcd155bc297b52ebaa8140e4bb2b 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -54,6 +54,7 @@ public class ItemEntity extends Entity {
     public final float bobOffs;
     private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
     public boolean canMobPickup = true; // Paper
+    private static final String PAPER_CAN_MOB_PICKUP_TAG = "Paper.canMobPickup"; // Paper // Prismarine - Paper PR
     // Purpur start
     public boolean immuneToCactus = false;
     public boolean immuneToExplosion = false;
@@ -375,6 +376,7 @@ public class ItemEntity extends Entity {
             nbt.putUUID("Owner", this.getOwner());
         }
 
+        nbt.putBoolean(PAPER_CAN_MOB_PICKUP_TAG, this.canMobPickup); // Paper // Prismarine - Paper PR
         if (!this.getItem().isEmpty()) {
             nbt.put("Item", this.getItem().save(new CompoundTag()));
         }
@@ -397,6 +399,7 @@ public class ItemEntity extends Entity {
             this.thrower = nbt.getUUID("Thrower");
         }
 
+        this.canMobPickup = !nbt.contains(PAPER_CAN_MOB_PICKUP_TAG) || nbt.getBoolean(PAPER_CAN_MOB_PICKUP_TAG); // Paper // Prismarine - Paper PR
         CompoundTag nbttagcompound1 = nbt.getCompound("Item");
 
         this.setItem(ItemStack.of(nbttagcompound1));
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 6a4214b6110119215154fee48d000bc1051ea626..6fc2530d15640ce2e8392567a4adbade4f51028b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -128,8 +128,9 @@ public class EnderMan extends Monster implements NeutralMob {
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new EnderMan.EndermanLookForPlayerGoal(this, this::isAngryAt));
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Endermite.class, 10, true, false, (entityliving) -> entityliving.level.purpurConfig.endermanAggroEndermites && entityliving instanceof Endermite endermite && (!entityliving.level.purpurConfig.endermanAggroEndermitesOnlyIfPlayerSpawned || endermite.isPlayerSpawned()))); // Purpur
-        this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt)); // Paper - fix enderman universal anger // Prismarine - Paper PR
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Endermite.class, 10, true, false, (entityliving) -> entityliving.level.purpurConfig.endermanAggroEndermites && entityliving instanceof Endermite endermite && (!entityliving.level.purpurConfig.endermanAggroEndermitesOnlyIfPlayerSpawned || endermite.isPlayerSpawned()))); // Purpur
+        this.targetSelector.addGoal(5, new ResetUniversalAngerTargetGoal<>(this, false));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index 876964a73109bba22584d120fdfd0089bbadc975..c840b768bcf8f9a04ebdc3974708bc0da5d12836 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -233,7 +233,7 @@ public class Vindicator extends AbstractIllager {
     private static class VindicatorBreakDoorGoal extends BreakDoorGoal {
 
         public VindicatorBreakDoorGoal(Mob mob) {
-            super(mob, 6, com.google.common.base.Predicates.in(mob.level.paperConfig.vindicatorBreakDoors)); // Paper
+            super(mob, 6, com.google.common.base.Predicates.in(mob.level.paperConfig.entitiesDifficultyBreakDoors.getOrDefault(mob.getType(), mob.level.paperConfig.entitiesDifficultyBreakDoors.get(EntityType.VINDICATOR)))); // Paper // Prismarine
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 227b710f55187e44b1eafe21f18d1c36a4261345..4b91a04953a56b2b5d9b50e72c4c42eb5e489a34 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -97,7 +97,7 @@ public class Zombie extends Monster {
 
     public Zombie(EntityType<? extends Zombie> type, Level world) {
         super(type, world);
-        this.breakDoorGoal = new BreakDoorGoal(this, com.google.common.base.Predicates.in(world.paperConfig.zombieBreakDoors)); // Paper
+        this.breakDoorGoal = new BreakDoorGoal(this, com.google.common.base.Predicates.in(world.paperConfig.entitiesDifficultyBreakDoors.getOrDefault(type, world.paperConfig.entitiesDifficultyBreakDoors.get(EntityType.ZOMBIE)))); // Paper // Prismarine
         this.setShouldBurnInDay(true); // Purpur
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index bc0a49d41bdbc5544f789150ac239617d03b5837..8c5c94dfd433c9d0bde0f33525fd0a1af89aba6b 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -200,6 +200,7 @@ public abstract class AbstractContainerMenu {
 
         if (this.synchronizer != null) {
             this.synchronizer.sendInitialData(this, this.remoteSlots, this.remoteCarried, this.remoteDataSlots.toIntArray());
+            this.synchronizer.sendOffHandSlotChange(); // Paper - update player's offhand since the offhand slot is not added to the slots for menus but can be changed by swapping from a menu slot // Prismarine - Paper PR
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/inventory/ContainerSynchronizer.java b/src/main/java/net/minecraft/world/inventory/ContainerSynchronizer.java
index ff4fa86f9408e83e505f7e27692d3423f8570c48..4ea3d29d7c4741d260fb7fe5d5a6c61cffe1b269 100644
--- a/src/main/java/net/minecraft/world/inventory/ContainerSynchronizer.java
+++ b/src/main/java/net/minecraft/world/inventory/ContainerSynchronizer.java
@@ -6,6 +6,7 @@ import net.minecraft.world.item.ItemStack;
 public interface ContainerSynchronizer {
     void sendInitialData(AbstractContainerMenu handler, NonNullList<ItemStack> stacks, ItemStack cursorStack, int[] properties);
 
+    default void sendOffHandSlotChange() {} // Paper // Prismarine - Paper PR
     void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack);
 
     void sendCarriedChange(AbstractContainerMenu handler, ItemStack stack);
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index eb595d1b6ef59ca18ce1c3c3ccd2aa05242ebe65..d133064adafa92859e3dfcee968b13a57b81f8fa 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -266,7 +266,10 @@ public class BlockItem extends Item {
 
                     nbttagcompound1.merge(nbttagcompound);
                     if (!nbttagcompound1.equals(nbttagcompound2)) {
+                        boolean prevForceLoadState = tileentity.forceLoad; // Paper // Prismarine - Paper PR
+                        tileentity.forceLoad = false; // Paper // Prismarine - Paper PR
                         tileentity.load(nbttagcompound1);
+                        tileentity.forceLoad = prevForceLoadState;
                         tileentity.setChanged();
                         return true;
                     }
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 6bbf1618e41c81fd2064ffd5d835187a927f24b7..4c673f3c18a807586d49c1e43820e979a65d701e 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -77,6 +77,14 @@ public abstract class BaseSpawner {
     }
 
     public void serverTick(ServerLevel world, BlockPos pos) {
+        // Prismarine start - Paper PR
+        // Paper start - Ignore impossible spawn tick
+        if (spawnCount <= 0 || maxNearbyEntities <= 0) {
+            return;
+        }
+        // Paper end
+        // Prismarine end
+
         // Paper start - Configurable mob spawner tick rate
         if (spawnDelay > 0 && --tickDelay > 0) return;
         tickDelay = world.paperConfig.mobSpawnerTickRate;
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 29f6c10e2c2626a9726d295acf12efea2b463cd3..c608675334ba1e4fea36e94414e4e56dcb1e7af9 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -277,12 +277,22 @@ public class Explosion {
                             d14 = entity instanceof Player && level.paperConfig.disableExplosionKnockback ? 0 : ProtectionEnchantment.getExplosionKnockbackAfterDampener((LivingEntity) entity, d13); // Paper - Disable explosion knockback
                         }
 
-                        entity.setDeltaMovement(entity.getDeltaMovement().add(d8 * d14, d9 * d14, d10 * d14));
+                        // Prismarine start - Paper PR
+                        // Paper start - call EntityKnockbackByEntityEvent when the cause was an entity but the damage source doesn't contain an entity
+                        org.bukkit.util.Vector delta = new org.bukkit.util.Vector(d8 * d14, d9 * d14, d10 * d14);
+                        if (this.source != null && this.damageSource.getEntity() == null && entity instanceof LivingEntity livingEntity) {
+                            if (!new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent(livingEntity.getBukkitLivingEntity(), this.source.getBukkitEntity(), (float) d14, delta).callEvent()) {
+                                return;
+                            }
+                        }
+                        entity.setDeltaMovement(entity.getDeltaMovement().add(delta.getX(), delta.getY(), delta.getZ()));
+                        // Paper end
+                        // Prismarine end
                         if (entity instanceof Player) {
                             Player entityhuman = (Player) entity;
 
                             if (!entityhuman.isSpectator() && (!entityhuman.isCreative() || !entityhuman.getAbilities().flying) && !level.paperConfig.disableExplosionKnockback) { // Paper - Disable explosion knockback
-                                this.hitPlayers.put(entityhuman, new Vec3(d8 * d13, d9 * d13, d10 * d13));
+                                this.hitPlayers.put(entityhuman, org.bukkit.craftbukkit.util.CraftVector.toNMS(delta)); // Paper // Prismarine - Paper PR
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 2f7300522f9cab9b1132797cb5edf03eeea1f0bb..a5b730eab78ae4d6ed9193b18aaf2e78f8825535 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -170,8 +170,11 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
-    private org.spigotmc.TickLimiter entityLimiter;
-    private org.spigotmc.TickLimiter tileLimiter;
+    // Prismarine start - Paper PR
+    // Paper start - Disable tick limiters
+    // private org.spigotmc.TickLimiter entityLimiter;
+    // private org.spigotmc.TickLimiter tileLimiter;
+    // Prismarine end
     private int tileTickPosition;
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Move from Map in BlockRedstoneTorch to here
@@ -404,8 +407,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         // CraftBukkit end
         timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
         this.keepSpawnInMemory = this.paperConfig.keepSpawnInMemory; // Paper
-        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
-        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+        // Prismarine start - Paper PR
+        // Paper start - Disaable tick limiters
+        // this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+        // this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+        // Paper end
+        // Prismarine end
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray(this, executor) : com.destroystokyo.paper.antixray.ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.entitySliceManager = new io.papermc.paper.world.EntitySliceManager((ServerLevel)this); // Paper
     }
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index e9974415e8f016f50a93a5eea117afe25a6b735d..a510ec076ff91bb5e06ebfca0b00e6f82a92e8cd 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -88,7 +88,7 @@ public class BeehiveBlock extends BaseEntityBlock {
                 this.angerNearbyBees(world, pos);
             }
 
-            CriteriaTriggers.BEE_NEST_DESTROYED.trigger((ServerPlayer) player, state, stack, tileentitybeehive.getOccupantCount());
+            // CriteriaTriggers.BEE_NEST_DESTROYED.trigger((ServerPlayer) player, state, stack, tileentitybeehive.getOccupantCount()); // Paper - moved until after items are dropped
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CauldronBlock.java b/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
index 676184c48c3abd8e2fb9a04ae3e165dc298a02be..3aafcaae3315dbb7c18aa712a3eccb3ed6ce83fb 100644
--- a/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
@@ -36,10 +36,22 @@ public class CauldronBlock extends AbstractCauldronBlock {
     public void handlePrecipitation(BlockState state, Level world, BlockPos pos, Biome.Precipitation precipitation) {
         if (CauldronBlock.shouldHandlePrecipitation(world, precipitation)) {
             if (precipitation == Biome.Precipitation.RAIN) {
-                world.setBlockAndUpdate(pos, Blocks.WATER_CAULDRON.defaultBlockState());
+                // Prismarine start - Paper PR
+                // Paper start - call event for initial fill
+                if (!LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.WATER_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
+                    return;
+                }
+                // Paper end
+                // Prismarine end
                 world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
             } else if (precipitation == Biome.Precipitation.SNOW) {
-                world.setBlockAndUpdate(pos, Blocks.POWDER_SNOW_CAULDRON.defaultBlockState());
+                // Prismarine start - Paper PR
+                // Paper start - call event for initial fill
+                if (!LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.POWDER_SNOW_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
+                    return;
+                }
+                // Paper end
+                // Prismarine end
                 world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
             }
 
@@ -54,11 +66,23 @@ public class CauldronBlock extends AbstractCauldronBlock {
     @Override
     protected void receiveStalactiteDrip(BlockState state, Level world, BlockPos pos, Fluid fluid) {
         if (fluid == Fluids.WATER) {
-            LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.WATER_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL); // CraftBukkit
+            // Prismarine start - Paper PR
+            // Paper start - don't send level event or game event if cancelled
+            if (!LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.WATER_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) { // CraftBukkit
+                return;
+            }
+            // Paper end
+            // Prismarine end
             world.levelEvent(1047, pos, 0);
             world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
         } else if (fluid == Fluids.LAVA) {
-            LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.LAVA_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL); // CraftBukkit
+            // Prismarine start - Paper PR
+            // Paper start - don't send level event or game event if cancelled
+            if (!LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.LAVA_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) { // CraftBukkit
+                return;
+            }
+            // Paper end
+            // Prismarine end
             world.levelEvent(1046, pos, 0);
             world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index d8e4fda2d501545e5f891bca317e2aa5f9368f47..c2554cb88ec6f78ea8f734af545cd5349ede20fc 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -164,7 +164,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world.random));
+        world.scheduleTick(pos, (Block) this, FireBlock.getFireUpdateDelay(world)); // Paper // Prismarine
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
                 fireExtinguished(world, pos); // CraftBukkit - invalid place location
@@ -362,14 +362,22 @@ public class FireBlock extends BaseFireBlock {
     // Paper start - ItemActionContext param
     public void onPlace(BlockState iblockdata, Level world, BlockPos blockposition, BlockState iblockdata1, boolean flag, UseOnContext itemActionContext) {
         super.onPlace(iblockdata, world, blockposition, iblockdata1, flag, itemActionContext);
+        world.scheduleTick(blockposition, this, getFireUpdateDelay(world)); // Prismarine - Paper PR
         // Paper end
-        world.scheduleTick(blockposition, this, getFireTickDelay(world.random));
     }
 
     private static int getFireTickDelay(Random random) {
         return 30 + random.nextInt(10);
     }
 
+    // Prismarine start - Paper PR
+    // Paper start
+    private static int getFireUpdateDelay(Level world) {
+        return world.prismarineConfig.fireTickDelay + world.random.nextInt(10);
+    }
+    // Paper end
+    // Prismarine end
+
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
         builder.add(FireBlock.AGE, FireBlock.NORTH, FireBlock.EAST, FireBlock.SOUTH, FireBlock.WEST, FireBlock.UP);
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index e6ea389350cf391a87c4c388ed9a6325bdceb90d..0489c37838519b8f815860af7004c87b652d52e1 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -89,7 +89,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     }
 
     // CraftBukkit start
-    public static boolean changeLevel(BlockState iblockdata, Level world, BlockPos blockposition, BlockState newBlock, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
+    public static boolean changeLevel(BlockState iblockdata, Level world, BlockPos blockposition, BlockState newBlock, @javax.annotation.Nullable Entity entity, CauldronLevelChangeEvent.ChangeReason reason) { // Paper - entity is nullable // Prismarine - Paper PR
         CraftBlockState newState = CraftBlockStates.getBlockState(world, blockposition);
         newState.setData(newBlock);
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
index d58f3beabbdb48cbb36bd4802d12cda41628731f..403c8eeb1c7e86e87bc9fa8372d7417f03fc2300 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -102,7 +102,7 @@ public class BannerBlockEntity extends BlockEntity implements Nameable {
 
         this.itemPatterns = nbt.getList("Patterns", 10);
         // CraftBukkit start
-        while (this.itemPatterns.size() > 20) {
+        while (this.itemPatterns.size() > 20 && !this.forceLoad) {
             this.itemPatterns.remove(20);
         }
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 0fa91bd87dfec9cf8311bcbd5125caf6e308e90e..b32f679ccf1d8d5363b4d4df7b6789f71f9a8434 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -43,6 +43,7 @@ public abstract class BlockEntity {
     protected final BlockPos worldPosition;
     protected boolean remove;
     private BlockState blockState;
+    public boolean forceLoad = true; // Paper // Prismarine - Paper PR
 
     public BlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
         this.type = type;
@@ -276,6 +277,14 @@ public abstract class BlockEntity {
     }
     // CraftBukkit end
 
+    // Paper start
+    public CompoundTag sanitizeSentNbt(CompoundTag tag) {
+        tag.remove("PublicBukkitValues");
+
+        return tag;
+    }
+    // Paper end
+
     // Purpur start
     private String persistentDisplayName = null;
     private ListTag persistentLore = null;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index 7666bca74f4f68bb4e902ec2eb7c4895adbb9373..b16aa614cb003f2d67565ae159152ca487626c84 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -91,7 +91,7 @@ public class SignBlockEntity extends BlockEntity implements CommandSource { // C
         for (int i = 0; i < 4; ++i) {
             String s = nbt.getString(SignBlockEntity.RAW_TEXT_FIELD_NAMES[i]);
             // CraftBukkit start
-            if (s != null && s.length() > 2048) {
+            if (s != null && s.length() > 2048 && !this.forceLoad) {
                 s = "\"\"";
             }
 
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index 4dad7fc69bd213fcd20c24b032e1fa70cc6d0366..2cb220a6efd21b725d94219687e053606f40a954 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -155,4 +155,9 @@ public class PrismarineConfig {
     private static void useAirplaneCollisionContext() {
         useNormalCollisionContext = getBoolean("settings.use-normal-collision-context", useNormalCollisionContext);
     }
+
+    public static boolean useProxyProtocol = false;
+    private static void paperPRs() {
+        useProxyProtocol = getBoolean("settings.pull-requests.paper.use-proxy-protocol", useProxyProtocol);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index c310667d2d6ff323e19c01951fa7565f5c17d930..2ee8a7bf8a48c0fa10a364323a88198b102d4a6f 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -80,4 +80,9 @@ public class PrismarineWorldConfig {
     private void purpurPRs() {
         horseStandWhenHurt = getBoolean("pull-requests.purpur.mobs.horse.stand-when-hurt", horseStandWhenHurt);
     }
+
+    public int fireTickDelay = 30;
+    private void paperPRs() {
+        fireTickDelay = getInt("pull-requests.paper.fire-tick-delay", fireTickDelay);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index e231636403a70f28e7e4bf51542608872234ce94..802e5d80e53e534335844116e44e4eebc3ca4a13 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -365,10 +365,10 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
                 ((ChorusFlowerBlock) Blocks.CHORUS_FLOWER).generatePlant(access, pos, random, 8);
                 return true;
             case CRIMSON_FUNGUS:
-                gen = TreeFeatures.CRIMSON_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.CRIMSON_FUNGUS_PLANTED : TreeFeatures.CRIMSON_FUNGUS; // Paper - if world gen, don't use planted version // Prismarine - Paper PR
                 break;
             case WARPED_FUNGUS:
-                gen = TreeFeatures.WARPED_FUNGUS_PLANTED;
+                gen = this.isNormalWorld() ? TreeFeatures.WARPED_FUNGUS_PLANTED : TreeFeatures.WARPED_FUNGUS; // Paper - if world gen, don't use planted version // Prismarine - Paper PR
                 break;
             case AZALEA:
                 gen = TreeFeatures.AZALEA_TREE;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5ee8aa2c36b44c444caf13950a71f4f6c34dcd40..5c410379c69a62aa403b562074354c2a5b280b2a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1153,9 +1153,17 @@ public final class CraftServer implements Server {
         File folder = new File(this.getWorldContainer(), name);
         World world = this.getWorld(name);
 
-        if (world != null) {
-            return world;
+        // Prismarine start - Paper PR
+        // Paper start
+        World worldByKey = this.getWorld(creator.key());
+        if (world != null || worldByKey != null) {
+            if (world == worldByKey) {
+                return world;
+            }
+            throw new IllegalArgumentException("Cannot create a world with key " + creator.key() + " and name " + name + " one (or both) already match a world that exists");
         }
+        // Paper end
+        // Prismarine end
 
         if ((folder.exists()) && (!folder.isDirectory())) {
             throw new IllegalArgumentException("File exists with the name '" + name + "' and isn't a folder");
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 1fe46049cc33c24db04fbfcde36ab275c03177bf..68c2de2f4e8a621b1a59241d233d077227c3456e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1093,7 +1093,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Override
     public BlockData getBlockData(Material material) {
-        return CraftBlockData.fromData(BlockItem.getBlockState(CraftMagicNumbers.getBlock(material).defaultBlockState(), blockData));
+        // Prismarine start - Paper PR
+        // Paper start -fix NPE if this.blockData is null
+        final net.minecraft.world.level.block.state.BlockState defaultBlockState = CraftMagicNumbers.getBlock(material).defaultBlockState();
+        return CraftBlockData.fromData(this.blockData == null ? defaultBlockState : BlockItem.getBlockState(defaultBlockState, blockData));
+        // Paper end
+        // Prismarine end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
index 355c9f79fd3132848a00eacde951d1e1bfa92737..30e0d02eee10cfbf4558a0d61a0cb407e3678c7e 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
@@ -92,7 +92,7 @@ public final class CraftPersistentDataTypeRegistry {
         }
     }
 
-    private final Map<Class, TagAdapter> adapters = new HashMap<>();
+    private final Map<Class, TagAdapter> adapters = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - Replace HashMap with ConcurrentHashMap to avoid CME // Prismarine - Paper PR
 
     /**
      * Creates a suitable adapter instance for the primitive class type
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 9d974b535c03ff06f7f01cdd17dc700e3a3f150e..1650bf8f46abb9ce4bc5c26911cc199ba76ef2c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -453,8 +453,8 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
         CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
-        Dynamic<Tag> converted = DataFixers.getDataFixer().update(References.ITEM_STACK, new Dynamic<Tag>(NbtOps.INSTANCE, compound), dataVersion, getDataVersion());
-        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of((CompoundTag) converted.getValue()));
+        compound = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ITEM_STACK, compound, dataVersion, getDataVersion()); // Paper - rewrite dataconverter // Prismarine - Paper PR
+        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of(compound));
     }
 
     @Override
@@ -474,8 +474,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
         CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
-        Dynamic<Tag> converted = DataFixers.getDataFixer().update(References.ENTITY_TREE, new Dynamic<>(NbtOps.INSTANCE, compound), dataVersion, getDataVersion());
-        compound = (CompoundTag) converted.getValue();
+        compound = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.ENTITY, compound, dataVersion, getDataVersion()); // Paper - rewrite dataconverter // Prismarine - Paper PR
         if (!preserveUUID) compound.remove("UUID"); // Generate a new UUID so we don't have to worry about deserializing the same entity twice
         return net.minecraft.world.entity.EntityType.create(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle())
             .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?")).getBukkitEntity();
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 51357702045a87340169b6ddd6365cdc30955bc8..db94ed70382500f04951e66c5ecf931e5e65f039 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -217,7 +217,7 @@ public class ActivationRange
             // Paper end
 
             // Paper start
-            java.util.List<Entity> entities = world.getEntities((Entity)null, maxBB, null);
+            java.util.List<Entity> entities = world.getEntities((Entity)null, maxBB, (e) -> !(e instanceof net.minecraft.world.entity.Marker)); // Don't tick markers // Prismarine - Paper PR
             for (int i = 0; i < entities.size(); i++) {
                 Entity entity = entities.get(i);
                 ActivationRange.activateEntity(entity);
@@ -291,6 +291,14 @@ public class ActivationRange
         {
             return 100; // Paper
         }
+        // Prismarine start
+        // Paper start
+        if ( !entity.isOnGround() || entity.getDeltaMovement().horizontalDistanceSqr() > 9.999999747378752E-6D )
+        {
+            return 100;
+        }
+        // Paper end
+        // Prismarine end
         if ( !( entity instanceof AbstractArrow ) )
         {
             if ( (!entity.isOnGround() && !(entity instanceof FlyingMob)) ) // Paper - remove passengers logic
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 31a447e6e156b7b244b2ac69a9c03c09c7ed388c..a78e07c04580152d1d6e0d0ccce9a391e3518687 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -433,6 +433,9 @@ public class SpigotWorldConfig
         this.hangingTickFrequency = this.getInt( "hanging-tick-frequency", 100 );
     }
 
+    // Prismarine start - Paper PR
+    // Paper start - Disable tick limiters
+    /*
     public int tileMaxTickTime;
     public int entityMaxTickTime;
     private void maxTickTimes()
@@ -441,6 +444,9 @@ public class SpigotWorldConfig
         this.entityMaxTickTime = this.getInt("max-tick-time.entity", 50);
         this.log("Tile Max Tick Time: " + this.tileMaxTickTime + "ms Entity max Tick Time: " + this.entityMaxTickTime + "ms");
     }
+    */
+    // Paper end
+    // Prismarine end
 
     public int thunderChance;
     private void thunderChance()
diff --git a/src/main/java/org/spigotmc/TickLimiter.java b/src/main/java/org/spigotmc/TickLimiter.java
deleted file mode 100644
index 4074538ea6090bf99d8ab04b1e98c2832a0e9a98..0000000000000000000000000000000000000000
--- a/src/main/java/org/spigotmc/TickLimiter.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.spigotmc;
-
-public class TickLimiter {
-
-    private final int maxTime;
-    private long startTime;
-
-    public TickLimiter(int maxtime) {
-        this.maxTime = maxtime;
-    }
-
-    public void initTick() {
-        this.startTime = System.currentTimeMillis();
-    }
-
-    public boolean shouldContinue() {
-        long remaining = System.currentTimeMillis() - this.startTime;
-        return remaining < this.maxTime;
-    }
-}

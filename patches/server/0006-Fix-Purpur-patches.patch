From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 24 Jul 2022 18:57:05 +0900
Subject: [PATCH] Fix Purpur patches


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index e13f5a56b5067ca5c322252d634a9096fd1a97c9..9ed7bc941f121035ebbf474f87ec9e278d1da5bb 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1651,7 +1651,7 @@ public final class NewChunkHolder {
         boolean canSavePOI = poi != null && poi.isDirty();
         boolean canSaveEntities = entities != null;
 
-        try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
+        //try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper // Prismarine - Port PaperMC/Paper#8177 (Rewrite Chunk System) (Purpur - Remove Timings)
             if (canSaveChunk) {
                 canSaveChunk = this.saveChunk(chunk, unloading);
             }
@@ -1665,7 +1665,7 @@ public final class NewChunkHolder {
                     this.lastEntityUnload = null;
                 }
             }
-        }
+        //} // Prismarine - Port PaperMC/Paper#8177 (Rewrite Chunk System) (Purpur - Remove Timings)
 
         return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI;
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5a609ddfdad131172de374e3006aaf4b5aadc5ed..3acde23569719eee5493738b6e64e9eb1b545313 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -221,7 +221,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private String localIp;
     private int port;
     public final RegistryAccess.Frozen registryHolder;
-    private Map<ResourceKey<Level>, ServerLevel> levels;
+    public Map<ResourceKey<Level>, ServerLevel> levels; // Prismarine - private -> public
     private PlayerList playerList;
     private volatile boolean running;
     private volatile boolean isRestarting = false; // Paper - flag to signify we're attempting to restart
@@ -942,7 +942,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         MinecraftServer.LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Shutdown and don't bother finishing
-        MinecraftTimings.stopServer(); // Paper
+        //MinecraftTimings.stopServer(); // Paper // Prismarine - NO TIMINGS
         // Purpur start
         if (upnp) {
             if (dev.omega24.upnp4j.UPnP4J.close(this.getPort(), dev.omega24.upnp4j.util.Protocol.TCP)) {
@@ -951,6 +951,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 LOGGER.error("[UPnP] Failed to close port {}", this.getPort());
             }
         }
+        // Purpur end // Prismarine - Mark
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 19533ae826570a4847037385ab0c8ecf00a20b73..faee61048bc4a50509030f6adf80879cc39a9185 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -658,7 +658,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
 
-        if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+        if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) { // Purpur // Prismarine - Mark
             // CraftBukkit start
             j = this.levelData.getDayTime() + 24000L;
             TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
@@ -968,7 +968,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             return holder.is(PoiTypes.LIGHTNING_ROD);
         }, (blockposition1) -> {
             return blockposition1.getY() == this.getHeight(Heightmap.Types.WORLD_SURFACE, blockposition1.getX(), blockposition1.getZ()) - 1;
-        }, pos, org.purpurmc.purpur.PurpurConfig.lightningRodRange, PoiManager.Occupancy.ANY);
+        }, pos, org.purpurmc.purpur.PurpurConfig.lightningRodRange, PoiManager.Occupancy.ANY); // Purpur // Prismarine - Mark
 
         return optional.map((blockposition1) -> {
             return blockposition1.above(1);
@@ -1017,7 +1017,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (this.canSleepThroughNights()) {
             if (!this.getServer().isSingleplayer() || this.getServer().isPublished()) {
                 int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
-                Component ichatmutablecomponent;
+                Component ichatmutablecomponent; // Purpur // Prismarine - Mark
 
                 if (this.sleepStatus.areEnoughSleeping(i)) {
                     // Purpur start
@@ -1242,7 +1242,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             // Paper end - log detailed entity tick information
         ++TimingHistory.entityTicks; // Paper - timings
         // Spigot start
-        co.aikar.timings.Timing timer; // Paper
+        //co.aikar.timings.Timing timer; // Paper // Prismarine
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
             timer = entity.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
